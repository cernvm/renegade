"""Generated message classes for dataproc version v1beta1.

An API for managing Hadoop-based clusters and jobs on Google Cloud Platform.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from protorpc import messages as _messages

from googlecloudsdk.third_party.apitools.base.py import encoding


package = 'dataproc'


class Agent(_messages.Message):
  """A record for a single agent within Dataproc.

  Enums:
    StatusValueValuesEnum: Agent status.

  Fields:
    agentId: [Required] 64 characters matching the regular expression:
      [a-z0-9.-]{1,64} An agent chosen ID. This should typically be the
      hostname of the GCE virtual machine on which the agent is currently
      running.
    agentVersion: The version of this agent in HTTP User-Agent Header value
      format (RFC 2616 section 14.43), e.g., "Dataproc-Agent/1.2".
    lastAgentUpdateTime: [Out] the last time this agent checked-in with
      Dataproc.
    status: Agent status.
  """

  class StatusValueValuesEnum(_messages.Enum):
    """Agent status.

    Values:
      STATUS_UNKNOWN: Status is not known.
      INITIALIZING: Agent has started and is running built-in initialization
        actions.
      PERFORMING_CUSTOM_INITIALIZATION_ACTIONS: Running user-supplied
        initialization actions.
      RUNNING: Agent is running and is ready to receive work.
      SETUP_FAILED: Agent setup failed, node is not usable.
    """
    STATUS_UNKNOWN = 0
    INITIALIZING = 1
    PERFORMING_CUSTOM_INITIALIZATION_ACTIONS = 2
    RUNNING = 3
    SETUP_FAILED = 4

  agentId = _messages.StringField(1)
  agentVersion = _messages.StringField(2)
  lastAgentUpdateTime = _messages.StringField(3)
  status = _messages.EnumField('StatusValueValuesEnum', 4)


class CancelJobRequest(_messages.Message):
  """A request to cancel a job."""


class CancelOperationRequest(_messages.Message):
  """The request message for Operations.CancelOperation."""


class Cluster(_messages.Message):
  """Describes the identifying information, configuration, and status of a
  cluster of Google Compute Engine instances.

  Fields:
    clusterName: [Required] The cluster name. Cluster names within a project
      must be unique. Names from deleted clusters can be reused.
    clusterUuid: [Output-only] A cluster UUID (Unique Universal Identifier).
      Cloud Dataproc generates this value when it creates the cluster.
    configuration: [Required] The cluster configuration. Note that Cloud
      Dataproc may set default values, and values may change when clusters are
      updated.
    projectId: [Required] The Google Cloud Platform project ID that the
      cluster belongs to.
    status: [Output-only] Cluster status.
    statusHistory: [Output-only] Previous cluster statuses.
  """

  clusterName = _messages.StringField(1)
  clusterUuid = _messages.StringField(2)
  configuration = _messages.MessageField('ClusterConfiguration', 3)
  projectId = _messages.StringField(4)
  status = _messages.MessageField('ClusterStatus', 5)
  statusHistory = _messages.MessageField('ClusterStatus', 6, repeated=True)


class ClusterConfiguration(_messages.Message):
  """The cluster configuration.

  Fields:
    configurationBucket: [Optional] A Google Cloud Storage staging bucket used
      for sharing generated SSH keys and configuration. If you do not specify
      a staging bucket, Cloud Dataproc will determine an appropriate Cloud
      Storage location (US, ASIA, or EU) for your cluster's staging bucket
      according to the Google Compute Engine zone where your cluster is
      deployed, and then it will create and manage this project-level, per-
      location bucket for you.
    gceClusterConfiguration: [Optional] The shared Google Compute Engine
      configuration settings for all instances in a cluster.
    initializationActions: [Optional] Commands to execute on each node after
      configuration is completed. By default, executables are run on master
      and all worker nodes. You can test a node's <code>role</code> metadata
      to run an executable on a master or worker node, as shown below:
      ROLE=$(/usr/share/google/get_metadata_value attributes/role)     if [[
      "${ROLE}" == 'Master' ]]; then       ... master specific actions ...
      else       ... worker specific actions ...     fi
    masterConfiguration: [Optional] The Google Compute Engine configuration
      settings for the master instance in a cluster.
    secondaryWorkerConfiguration: [Optional] The Google Compute Engine
      configuration settings for additional worker instances in a cluster.
    softwareConfiguration: [Optional] The configuration settings for software
      inside the cluster.
    workerConfiguration: [Optional] The Google Compute Engine configuration
      settings for worker instances in a cluster.
  """

  configurationBucket = _messages.StringField(1)
  gceClusterConfiguration = _messages.MessageField('GceClusterConfiguration', 2)
  initializationActions = _messages.MessageField('NodeInitializationAction', 3, repeated=True)
  masterConfiguration = _messages.MessageField('InstanceGroupConfiguration', 4)
  secondaryWorkerConfiguration = _messages.MessageField('InstanceGroupConfiguration', 5)
  softwareConfiguration = _messages.MessageField('SoftwareConfiguration', 6)
  workerConfiguration = _messages.MessageField('InstanceGroupConfiguration', 7)


class ClusterStatus(_messages.Message):
  """The status of a cluster and its instances.

  Enums:
    StateValueValuesEnum: The cluster's state.

  Fields:
    detail: Optional details of cluster's state.
    state: The cluster's state.
    stateStartTime: Time when this state was entered.
  """

  class StateValueValuesEnum(_messages.Enum):
    """The cluster's state.

    Values:
      UNKNOWN: The cluster state is unknown.
      CREATING: The cluster is being created and set up. It is not ready for
        use.
      RUNNING: The cluster is currently running and healthy. It is ready for
        use.
      ERROR: The cluster encountered an error. It is not ready for use.
      DELETING: The cluster is being deleted. It cannot be used.
      UPDATING: The cluster is being updated. It continues to accept and
        process jobs.
    """
    UNKNOWN = 0
    CREATING = 1
    RUNNING = 2
    ERROR = 3
    DELETING = 4
    UPDATING = 5

  detail = _messages.StringField(1)
  state = _messages.EnumField('StateValueValuesEnum', 2)
  stateStartTime = _messages.StringField(3)


class DataprocOperationsCancelRequest(_messages.Message):
  """A DataprocOperationsCancelRequest object.

  Fields:
    cancelOperationRequest: A CancelOperationRequest resource to be passed as
      the request body.
    name: The name of the operation resource to be cancelled.
  """

  cancelOperationRequest = _messages.MessageField('CancelOperationRequest', 1)
  name = _messages.StringField(2, required=True)


class DataprocOperationsDeleteRequest(_messages.Message):
  """A DataprocOperationsDeleteRequest object.

  Fields:
    name: The name of the operation resource to be deleted.
  """

  name = _messages.StringField(1, required=True)


class DataprocOperationsGetRequest(_messages.Message):
  """A DataprocOperationsGetRequest object.

  Fields:
    name: The name of the operation resource.
  """

  name = _messages.StringField(1, required=True)


class DataprocOperationsListRequest(_messages.Message):
  """A DataprocOperationsListRequest object.

  Fields:
    filter: The standard list filter.
    name: The name of the operation collection.
    pageSize: The standard list page size.
    pageToken: The standard list page token.
  """

  filter = _messages.StringField(1)
  name = _messages.StringField(2, required=True)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)


class DataprocProjectsClustersAgentsCreateRequest(_messages.Message):
  """A DataprocProjectsClustersAgentsCreateRequest object.

  Fields:
    agent: A Agent resource to be passed as the request body.
    agentId: [Required] Agent ID being registered.
    clusterUuid: Cluster that this agent is associated with
    projectId: Project ID that this agent is associated with
  """

  agent = _messages.MessageField('Agent', 1)
  agentId = _messages.StringField(2, required=True)
  clusterUuid = _messages.StringField(3, required=True)
  projectId = _messages.StringField(4, required=True)


class DataprocProjectsClustersAgentsDeleteRequest(_messages.Message):
  """A DataprocProjectsClustersAgentsDeleteRequest object.

  Fields:
    agentId: The agent.
    clusterUuid: The agent's cluster.
    projectId: The agent's project.
  """

  agentId = _messages.StringField(1, required=True)
  clusterUuid = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)


class DataprocProjectsClustersAgentsGetRequest(_messages.Message):
  """A DataprocProjectsClustersAgentsGetRequest object.

  Fields:
    agentId: The agent's ID.
    clusterUuid: The agent's cluster.
    projectId: The agent's project ID.
  """

  agentId = _messages.StringField(1, required=True)
  clusterUuid = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)


class DataprocProjectsClustersAgentsListRequest(_messages.Message):
  """A DataprocProjectsClustersAgentsListRequest object.

  Fields:
    clusterUuid: The cluster from which to list agents.
    pageSize: Requested page size for listing.
    pageToken: Page continuation token.
    projectId: The project from which to list agents.
  """

  clusterUuid = _messages.StringField(1, required=True)
  pageSize = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(3)
  projectId = _messages.StringField(4, required=True)


class DataprocProjectsClustersAgentsUpdateRequest(_messages.Message):
  """A DataprocProjectsClustersAgentsUpdateRequest object.

  Fields:
    agent: A Agent resource to be passed as the request body.
    agentId: [Required] ID of agent sending the update.
    clusterUuid: The cluster on which the agent is running.
    projectId: The agent's project.
  """

  agent = _messages.MessageField('Agent', 1)
  agentId = _messages.StringField(2, required=True)
  clusterUuid = _messages.StringField(3, required=True)
  projectId = _messages.StringField(4, required=True)


class DataprocProjectsClustersDeleteRequest(_messages.Message):
  """A DataprocProjectsClustersDeleteRequest object.

  Fields:
    clusterName: [Required] The cluster name.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      cluster belongs to.
  """

  clusterName = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)


class DataprocProjectsClustersDiagnoseRequest(_messages.Message):
  """A DataprocProjectsClustersDiagnoseRequest object.

  Fields:
    clusterName: [Required] The cluster name.
    diagnoseClusterRequest: A DiagnoseClusterRequest resource to be passed as
      the request body.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      cluster belongs to.
  """

  clusterName = _messages.StringField(1, required=True)
  diagnoseClusterRequest = _messages.MessageField('DiagnoseClusterRequest', 2)
  projectId = _messages.StringField(3, required=True)


class DataprocProjectsClustersGetRequest(_messages.Message):
  """A DataprocProjectsClustersGetRequest object.

  Fields:
    clusterName: [Required] The cluster name.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      cluster belongs to.
  """

  clusterName = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)


class DataprocProjectsClustersListRequest(_messages.Message):
  """A DataprocProjectsClustersListRequest object.

  Fields:
    pageSize: The standard List page size.
    pageToken: The standard List page token.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      cluster belongs to.
  """

  pageSize = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(2)
  projectId = _messages.StringField(3, required=True)


class DataprocProjectsClustersPatchRequest(_messages.Message):
  """A DataprocProjectsClustersPatchRequest object.

  Fields:
    cluster: A Cluster resource to be passed as the request body.
    clusterName: [Required] The cluster name.
    projectId: [Required] The ID of the Google Cloud Platform project the
      cluster belongs to.
    updateMask: [Required] Specifies the path, relative to
      <code>Cluster</code>, of the field to update. For example, to change the
      number of workers in a cluster to 5, the <code>update_mask</code>
      parameter would be specified as
      <code>configuration.worker_configuration.num_instances</code>, and the
      `PATCH` request body would specify the new value, as follows:      {
      "configuration":{         "workerConfiguration":{
      "numInstances":"5"         }       }     } <strong>Note:</strong>
      Currently, <code>configuration.worker_configuration.num_instances</code>
      is the only field that can be updated.
  """

  cluster = _messages.MessageField('Cluster', 1)
  clusterName = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)
  updateMask = _messages.StringField(4)


class DataprocProjectsClustersTasksLeaseRequest(_messages.Message):
  """A DataprocProjectsClustersTasksLeaseRequest object.

  Fields:
    clusterUuid: The cluster id of the agent.
    leaseTasksRequest: A LeaseTasksRequest resource to be passed as the
      request body.
    projectId: The project id of the agent.
  """

  clusterUuid = _messages.StringField(1, required=True)
  leaseTasksRequest = _messages.MessageField('LeaseTasksRequest', 2)
  projectId = _messages.StringField(3, required=True)


class DataprocProjectsClustersTasksReportRequest(_messages.Message):
  """A DataprocProjectsClustersTasksReportRequest object.

  Fields:
    clusterUuid: The cluster id of the agent.
    projectId: The project id of the agent.
    reportTaskStatusRequest: A ReportTaskStatusRequest resource to be passed
      as the request body.
    taskId: The task that is being reported on.
  """

  clusterUuid = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)
  reportTaskStatusRequest = _messages.MessageField('ReportTaskStatusRequest', 3)
  taskId = _messages.StringField(4, required=True)


class DataprocProjectsJobsCancelRequest(_messages.Message):
  """A DataprocProjectsJobsCancelRequest object.

  Fields:
    cancelJobRequest: A CancelJobRequest resource to be passed as the request
      body.
    jobId: [Required] The job ID.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      job belongs to.
  """

  cancelJobRequest = _messages.MessageField('CancelJobRequest', 1)
  jobId = _messages.StringField(2, required=True)
  projectId = _messages.StringField(3, required=True)


class DataprocProjectsJobsDeleteRequest(_messages.Message):
  """A DataprocProjectsJobsDeleteRequest object.

  Fields:
    jobId: [Required] The job ID.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      job belongs to.
  """

  jobId = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)


class DataprocProjectsJobsGetRequest(_messages.Message):
  """A DataprocProjectsJobsGetRequest object.

  Fields:
    jobId: [Required] The job ID.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      job belongs to.
  """

  jobId = _messages.StringField(1, required=True)
  projectId = _messages.StringField(2, required=True)


class DataprocProjectsJobsListRequest(_messages.Message):
  """A DataprocProjectsJobsListRequest object.

  Enums:
    JobStateMatcherValueValuesEnum: [Optional] Specifies enumerated categories
      of jobs to list.

  Fields:
    clusterName: [Optional] If set, the returned jobs list includes only jobs
      that were submitted to the named cluster.
    jobStateMatcher: [Optional] Specifies enumerated categories of jobs to
      list.
    pageSize: [Optional] The number of results to return in each response.
    pageToken: [Optional] The page token, returned by a previous call, to
      request the next page of results.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      job belongs to.
  """

  class JobStateMatcherValueValuesEnum(_messages.Enum):
    """[Optional] Specifies enumerated categories of jobs to list.

    Values:
      ALL: <no description>
      ACTIVE: <no description>
      NON_ACTIVE: <no description>
    """
    ALL = 0
    ACTIVE = 1
    NON_ACTIVE = 2

  clusterName = _messages.StringField(1)
  jobStateMatcher = _messages.EnumField('JobStateMatcherValueValuesEnum', 2)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)
  projectId = _messages.StringField(5, required=True)


class DataprocProjectsJobsSubmitRequest(_messages.Message):
  """A DataprocProjectsJobsSubmitRequest object.

  Fields:
    projectId: [Required] The ID of the Google Cloud Platform project that the
      job belongs to.
    submitJobRequest: A SubmitJobRequest resource to be passed as the request
      body.
  """

  projectId = _messages.StringField(1, required=True)
  submitJobRequest = _messages.MessageField('SubmitJobRequest', 2)


class DiagnoseClusterOutputLocation(_messages.Message):
  """The location where output from diagnostic command can be found.

  Fields:
    outputUri: [Output-only] The Google Cloud Storage URI of the diagnostic
      output. This will be a plain text file with summary of collected
      diagnostics.
  """

  outputUri = _messages.StringField(1)


class DiagnoseClusterRequest(_messages.Message):
  """A request to collect cluster diagnostic information."""


class DiskConfiguration(_messages.Message):
  """Specifies the configuration of disk options for a group of VM instances.

  Fields:
    bootDiskSizeGb: [Optional] Size in GB of the boot disk (default is 500GB).
    numLocalSsds: [Optional] Number of attached SSDs, from 0 to 4 (default is
      0). If SSDs are not attached, the boot disk is used to store runtime
      logs and HDFS data. If one or more SSDs are attached, this runtime bulk
      data is spread across them, and the boot disk contains only basic
      configuration and installed binaries.
  """

  bootDiskSizeGb = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  numLocalSsds = _messages.IntegerField(2, variant=_messages.Variant.INT32)


class Empty(_messages.Message):
  """A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:      service Foo {
  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The
  JSON representation for `Empty` is empty JSON object `{}`.
  """



class GceClusterConfiguration(_messages.Message):

  networkUri = _messages.StringField(1)
  serviceAccountScopes = _messages.StringField(2, repeated=True)
  zoneUri = _messages.StringField(3)


class HadoopJob(_messages.Message):

  @encoding.MapUnrecognizedFields('additionalProperties')
  class PropertiesValue(_messages.Message):
    """[Optional] A mapping of property names to values, used to configure
    Hadoop. Properties that conflict with values set by the Cloud Dataproc API
    may be overwritten. Can include properties set in /etc/hadoop/conf/*-site
    and classes in user code.

    Messages:
      AdditionalProperty: An additional property for a PropertiesValue object.

    Fields:
      additionalProperties: Additional properties of type PropertiesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a PropertiesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  archiveUris = _messages.StringField(1, repeated=True)
  args = _messages.StringField(2, repeated=True)
  fileUris = _messages.StringField(3, repeated=True)
  jarFileUris = _messages.StringField(4, repeated=True)
  loggingConfiguration = _messages.MessageField('LoggingConfiguration', 5)
  mainClass = _messages.StringField(6)
  mainJarFileUri = _messages.StringField(7)
  properties = _messages.MessageField('PropertiesValue', 8)


class HiveJob(_messages.Message):
  """A Cloud Dataproc job for running Hive queries on YARN.

  Messages:
    PropertiesValue: [Optional] A mapping of property names and values, used
      to configure Hive. Properties that conflict with values set by the Cloud
      Dataproc API may be overwritten. Can include properties set in
      /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml, and classes
      in user code.
    ScriptVariablesValue: [Optional] Mapping of query variable names to values
      (equivalent to the Hive command: `SET name="value";`).

  Fields:
    continueOnFailure: [Optional] Whether to continue executing queries if a
      query fails. The default value is `false`. Setting to `true` can be
      useful when executing independent parallel queries.
    jarFileUris: [Optional] HCFS URIs of jar files to add to the CLASSPATH of
      the Hive server and Hadoop MapReduce (MR) tasks. Can contain Hive SerDes
      and UDFs.
    properties: [Optional] A mapping of property names and values, used to
      configure Hive. Properties that conflict with values set by the Cloud
      Dataproc API may be overwritten. Can include properties set in
      /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml, and classes
      in user code.
    queryFileUri: The HCFS URI of the script that contains Hive queries.
    queryList: A list of queries.
    scriptVariables: [Optional] Mapping of query variable names to values
      (equivalent to the Hive command: `SET name="value";`).
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class PropertiesValue(_messages.Message):
    """[Optional] A mapping of property names and values, used to configure
    Hive. Properties that conflict with values set by the Cloud Dataproc API
    may be overwritten. Can include properties set in
    /etc/hadoop/conf/*-site.xml, /etc/hive/conf/hive-site.xml, and classes in
    user code.

    Messages:
      AdditionalProperty: An additional property for a PropertiesValue object.

    Fields:
      additionalProperties: Additional properties of type PropertiesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a PropertiesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ScriptVariablesValue(_messages.Message):
    """[Optional] Mapping of query variable names to values (equivalent to the
    Hive command: `SET name="value";`).

    Messages:
      AdditionalProperty: An additional property for a ScriptVariablesValue
        object.

    Fields:
      additionalProperties: Additional properties of type ScriptVariablesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ScriptVariablesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  continueOnFailure = _messages.BooleanField(1)
  jarFileUris = _messages.StringField(2, repeated=True)
  properties = _messages.MessageField('PropertiesValue', 3)
  queryFileUri = _messages.StringField(4)
  queryList = _messages.MessageField('QueryList', 5)
  scriptVariables = _messages.MessageField('ScriptVariablesValue', 6)


class InstanceGroupConfiguration(_messages.Message):

  diskConfiguration = _messages.MessageField('DiskConfiguration', 1)
  imageUri = _messages.StringField(2)
  instanceNames = _messages.StringField(3, repeated=True)
  isPreemptible = _messages.BooleanField(4)
  machineTypeUri = _messages.StringField(5)
  managedGroupConfiguration = _messages.MessageField('ManagedGroupConfiguration', 6)
  numInstances = _messages.IntegerField(7, variant=_messages.Variant.INT32)


class Job(_messages.Message):
  """A Cloud Dataproc job resource.

  Fields:
    driverControlFilesUri: [Output-only] If present, the location of
      miscellaneous control files which may be used as part of job setup and
      handling. If not present, control files may be placed in the same
      location as `driver_output_uri`.
    driverInputResourceUri: [Output-only] A URI pointing to the location of
      the stdin of the job's driver program, only set if the job is
      interactive.
    driverOutputResourceUri: [Output-only] A URI pointing to the location of
      the stdout of the job's driver program.
    hadoopJob: Job is a Hadoop job.
    hiveJob: Job is a Hive job.
    interactive: [Optional] If set to `true`, the driver's stdin will be kept
      open and `driver_input_uri` will be set to provide a path at which
      additional input can be sent to the driver.
    pigJob: Job is a Pig job.
    placement: [Required] Job information, including how, when, and where to
      run the job.
    pysparkJob: Job is a Pyspark job.
    reference: [Optional] The fully qualified reference to the job, which can
      be used to obtain the equivalent REST path of the job resource. If this
      property is not specified when a job is created, the server generates a
      <code>job_id</code>.
    sparkJob: Job is a Spark job.
    sparkSqlJob: Job is a SparkSql job.
    status: [Output-only] The job status. Additional application-specific
      status information may be contained in the <code>type_job</code> and
      <code>yarn_applications</code> fields.
    statusHistory: [Output-only] The previous job status.
    submittedBy: [Output-only] The email address of the user submitting the
      job. For jobs submitted on the cluster, the address is
      <code>username@hostname</code>.
    yarnApplications: [Output-only] The collection of YARN applications spun
      up by this job.
  """

  driverControlFilesUri = _messages.StringField(1)
  driverInputResourceUri = _messages.StringField(2)
  driverOutputResourceUri = _messages.StringField(3)
  hadoopJob = _messages.MessageField('HadoopJob', 4)
  hiveJob = _messages.MessageField('HiveJob', 5)
  interactive = _messages.BooleanField(6)
  pigJob = _messages.MessageField('PigJob', 7)
  placement = _messages.MessageField('JobPlacement', 8)
  pysparkJob = _messages.MessageField('PySparkJob', 9)
  reference = _messages.MessageField('JobReference', 10)
  sparkJob = _messages.MessageField('SparkJob', 11)
  sparkSqlJob = _messages.MessageField('SparkSqlJob', 12)
  status = _messages.MessageField('JobStatus', 13)
  statusHistory = _messages.MessageField('JobStatus', 14, repeated=True)
  submittedBy = _messages.StringField(15)
  yarnApplications = _messages.MessageField('YarnApplication', 16, repeated=True)


class JobPlacement(_messages.Message):
  """Cloud Dataproc job configuration. This will also eventually store the
  information for scheduling and queueing of jobs.

  Fields:
    clusterName: [Required] The name of the cluster where the job will be
      submitted.
    clusterUuid: [Output-only] A cluster UUID generated by the Dataproc
      service when the job is submitted.
  """

  clusterName = _messages.StringField(1)
  clusterUuid = _messages.StringField(2)


class JobReference(_messages.Message):
  """Encapsulates the full scoping used to reference a job.

  Fields:
    jobId: [Required] The job ID, which must be unique within the project. The
      job ID is generated by the server upon job submission or provided by the
      user as a means to perform retries without creating duplicate jobs. The
      ID must contain only letters (a-z, A-Z), numbers (0-9), underscores (_),
      or hyphens (-). The maximum length is 512 characters.
    projectId: [Required] The ID of the Google Cloud Platform project that the
      job belongs to.
  """

  jobId = _messages.StringField(1)
  projectId = _messages.StringField(2)


class JobStatus(_messages.Message):
  """Cloud Dataproc job status. May eventually contain information about
  progress, session state, etc.

  Enums:
    StateValueValuesEnum: [Required] A state message specifying the overall
      job state.

  Fields:
    details: [Optional] Job state details, such as an error description if the
      state is <code>ERROR</code>.
    state: [Required] A state message specifying the overall job state.
    stateStartTime: [Output-only] The time when this state was entered.
  """

  class StateValueValuesEnum(_messages.Enum):
    """[Required] A state message specifying the overall job state.

    Values:
      STATE_UNSPECIFIED: The job state is unknown.
      PENDING: The job is pending; it has been submitted, but is not yet
        running.
      SETUP_DONE: Job has been received by the service and completed initial
        setup; it will shortly be submitted to the cluster.
      RUNNING: The job is running on the cluster.
      CANCEL_PENDING: A CancelJob request has been received, but is pending.
      CANCEL_STARTED: Transient in-flight resources have been canceled, and
        the request to cancel the running job has been issued to the cluster.
      CANCELLED: The job cancelation was successful.
      DONE: The job has completed successfully.
      ERROR: The job has completed, but encountered an error.
    """
    STATE_UNSPECIFIED = 0
    PENDING = 1
    SETUP_DONE = 2
    RUNNING = 3
    CANCEL_PENDING = 4
    CANCEL_STARTED = 5
    CANCELLED = 6
    DONE = 7
    ERROR = 8

  details = _messages.StringField(1)
  state = _messages.EnumField('StateValueValuesEnum', 2)
  stateStartTime = _messages.StringField(3)


class LeaseTasksRequest(_messages.Message):
  """A request to lease tasks for execution by an agent.

  Fields:
    agentId: The agent's id.
    currentAgentTime: The current timestamp at the worker.
    requestedLeaseDuration: The requested initial lease period.
  """

  agentId = _messages.StringField(1)
  currentAgentTime = _messages.StringField(2)
  requestedLeaseDuration = _messages.StringField(3)


class LeaseTasksResponse(_messages.Message):
  """A Response for task leasing.

  Fields:
    leaseExpirationTime: The worker-local lease expiration time.
    reportStatusInterval: The interval at which status should be reported.
    tasks: A list of tasks that have been leased.
  """

  leaseExpirationTime = _messages.StringField(1)
  reportStatusInterval = _messages.StringField(2)
  tasks = _messages.MessageField('Task', 3, repeated=True)


class ListAgentsResponse(_messages.Message):
  """Response to ListAgents

  Fields:
    agents: A list of agents.
    nextPageToken: The token to send to ListAgents to acquire any following
      pages. Will be empty for last page.
  """

  agents = _messages.MessageField('Agent', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class ListClustersResponse(_messages.Message):
  """The list of all clusters in a project.

  Fields:
    clusters: [Output-only] The clusters in the project.
    nextPageToken: The standard List next-page token.
  """

  clusters = _messages.MessageField('Cluster', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class ListJobsResponse(_messages.Message):
  """A list of jobs in a project.

  Fields:
    jobs: [Output-only] Jobs list.
    nextPageToken: [Optional] This token is included in the response if there
      are more results to fetch. To fetch additional results, provide this
      value as the `page_token` in a subsequent <code>ListJobsRequest</code>.
  """

  jobs = _messages.MessageField('Job', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class ListOperationsResponse(_messages.Message):
  """The response message for Operations.ListOperations.

  Fields:
    nextPageToken: The standard List next-page token.
    operations: A list of operations that matches the specified filter in the
      request.
  """

  nextPageToken = _messages.StringField(1)
  operations = _messages.MessageField('Operation', 2, repeated=True)


class LoggingConfiguration(_messages.Message):
  """The runtime logging configuration of the job.

  Messages:
    DriverLogLevelsValue: The per-package log levels for the driver. This may
      include "root" package name to configure rootLogger. Examples:
      'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'

  Fields:
    driverLogLevels: The per-package log levels for the driver. This may
      include "root" package name to configure rootLogger. Examples:
      'com.google = FATAL', 'root = INFO', 'org.apache = DEBUG'
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DriverLogLevelsValue(_messages.Message):
    """The per-package log levels for the driver. This may include "root"
    package name to configure rootLogger. Examples:   'com.google = FATAL',
    'root = INFO', 'org.apache = DEBUG'

    Messages:
      AdditionalProperty: An additional property for a DriverLogLevelsValue
        object.

    Fields:
      additionalProperties: Additional properties of type DriverLogLevelsValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a DriverLogLevelsValue object.

      Enums:
        ValueValueValuesEnum:

      Fields:
        key: Name of the additional property.
        value: A ValueValueValuesEnum attribute.
      """

      class ValueValueValuesEnum(_messages.Enum):
        """ValueValueValuesEnum enum type.

        Values:
          LEVEL_UNSPECIFIED: <no description>
          ALL: <no description>
          TRACE: <no description>
          DEBUG: <no description>
          INFO: <no description>
          WARN: <no description>
          ERROR: <no description>
          FATAL: <no description>
          OFF: <no description>
        """
        LEVEL_UNSPECIFIED = 0
        ALL = 1
        TRACE = 2
        DEBUG = 3
        INFO = 4
        WARN = 5
        ERROR = 6
        FATAL = 7
        OFF = 8

      key = _messages.StringField(1)
      value = _messages.EnumField('ValueValueValuesEnum', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  driverLogLevels = _messages.MessageField('DriverLogLevelsValue', 1)


class ManagedGroupConfiguration(_messages.Message):
  """Specifies the resources used to actively manage an instance group.

  Fields:
    instanceGroupManagerName: [Output-only] The name of the Instance Group
      Manager for this group.
    instanceTemplateName: [Output-only] The name of the Instance Template used
      for the Managed Instance Group.
  """

  instanceGroupManagerName = _messages.StringField(1)
  instanceTemplateName = _messages.StringField(2)


class NodeInitializationAction(_messages.Message):
  """Specifies an executable to run on a fully configured node and a timeout
  period for executable completion.

  Fields:
    executableFile: [Required] Google Cloud Storage URI of executable file.
    executionTimeout: [Optional] Amount of time executable has to complete.
      Default is 10 minutes. Cluster creation fails with an explanatory error
      message (the name of the executable that caused the error and the
      exceeded timeout period) if the executable is not completed at end of
      the timeout period.
  """

  executableFile = _messages.StringField(1)
  executionTimeout = _messages.StringField(2)


class Operation(_messages.Message):
  """This resource represents a long-running operation that is the result of a
  network API call.

  Messages:
    MetadataValue: Service-specific metadata associated with the operation.
      It typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    ResponseValue: The normal response of the operation in case of success.
      If the original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

  Fields:
    done: If the value is `false`, it means the operation is still in
      progress. If true, the operation is completed, and either `error` or
      `response` is available.
    error: The error result of the operation in case of failure.
    metadata: Service-specific metadata associated with the operation.  It
      typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    name: The server-assigned name, which is only unique within the same
      service that originally returns it. If you use the default HTTP mapping
      above, the `name` should have the format of
      `operations/some/unique/name`.
    response: The normal response of the operation in case of success.  If the
      original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class MetadataValue(_messages.Message):
    """Service-specific metadata associated with the operation.  It typically
    contains progress information and common metadata such as create time.
    Some services might not provide such metadata.  Any method that returns a
    long-running operation should document the metadata type, if any.

    Messages:
      AdditionalProperty: An additional property for a MetadataValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a MetadataValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ResponseValue(_messages.Message):
    """The normal response of the operation in case of success.  If the
    original method returns no data on success, such as `Delete`, the response
    is `google.protobuf.Empty`.  If the original method is standard
    `Get`/`Create`/`Update`, the response should be the resource.  For other
    methods, the response should have the type `XxxResponse`, where `Xxx` is
    the original method name.  For example, if the original method name is
    `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

    Messages:
      AdditionalProperty: An additional property for a ResponseValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ResponseValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  done = _messages.BooleanField(1)
  error = _messages.MessageField('Status', 2)
  metadata = _messages.MessageField('MetadataValue', 3)
  name = _messages.StringField(4)
  response = _messages.MessageField('ResponseValue', 5)


class OperationMetadata(_messages.Message):
  """Metadata describing the operation.

  Enums:
    StateValueValuesEnum: A message containing the operation state.

  Fields:
    clusterName: Name of the cluster for the operation.
    clusterUuid: Cluster UUId for the operation.
    details: A message containing any operation metadata details.
    endTime: The time that the operation completed.
    innerState: A message containing the detailed operation state.
    insertTime: The time that the operation was requested.
    startTime: The time that the operation was started by the server.
    state: A message containing the operation state.
    status: [Output-only] Current operation status.
    statusHistory: [Output-only] Previous operation status.
  """

  class StateValueValuesEnum(_messages.Enum):
    """A message containing the operation state.

    Values:
      UNKNOWN: Unused.
      PENDING: The operation has been created.
      RUNNING: The operation is currently running.
      DONE: The operation is done, either cancelled or completed.
    """
    UNKNOWN = 0
    PENDING = 1
    RUNNING = 2
    DONE = 3

  clusterName = _messages.StringField(1)
  clusterUuid = _messages.StringField(2)
  details = _messages.StringField(3)
  endTime = _messages.StringField(4)
  innerState = _messages.StringField(5)
  insertTime = _messages.StringField(6)
  startTime = _messages.StringField(7)
  state = _messages.EnumField('StateValueValuesEnum', 8)
  status = _messages.MessageField('OperationStatus', 9)
  statusHistory = _messages.MessageField('OperationStatus', 10, repeated=True)


class OperationStatus(_messages.Message):
  """The status of the operation.

  Enums:
    StateValueValuesEnum: A message containing the operation state.

  Fields:
    details: A message containing any operation metadata details.
    innerState: A message containing the detailed operation state.
    state: A message containing the operation state.
    stateStartTime: The time this state was entered.
  """

  class StateValueValuesEnum(_messages.Enum):
    """A message containing the operation state.

    Values:
      UNKNOWN: Unused.
      PENDING: The operation has been created.
      RUNNING: The operation is running.
      DONE: The operation is done; either cancelled or completed.
    """
    UNKNOWN = 0
    PENDING = 1
    RUNNING = 2
    DONE = 3

  details = _messages.StringField(1)
  innerState = _messages.StringField(2)
  state = _messages.EnumField('StateValueValuesEnum', 3)
  stateStartTime = _messages.StringField(4)


class PigJob(_messages.Message):
  """A Cloud Dataproc job for running Pig queries on YARN.

  Messages:
    PropertiesValue: [Optional] A mapping of property names to values, used to
      configure Pig. Properties that conflict with values set by the Cloud
      Dataproc API may be overwritten. Can include properties set in
      /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes
      in user code.
    ScriptVariablesValue: [Optional] Mapping of query variable names to values
      (equivalent to the Pig command: `name=[value]`).

  Fields:
    continueOnFailure: [Optional] Whether to continue executing queries if a
      query fails. The default value is `false`. Setting to `true` can be
      useful when executing independent parallel queries.
    jarFileUris: [Optional] HCFS URIs of jar files to add to the CLASSPATH of
      the Pig Client and Hadoop MapReduce (MR) tasks. Can contain Pig UDFs.
    loggingConfiguration: [Optional] The runtime log configuration for job
      execution.
    properties: [Optional] A mapping of property names to values, used to
      configure Pig. Properties that conflict with values set by the Cloud
      Dataproc API may be overwritten. Can include properties set in
      /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes
      in user code.
    queryFileUri: The HCFS URI of the script that contains the Pig queries.
    queryList: A list of queries.
    scriptVariables: [Optional] Mapping of query variable names to values
      (equivalent to the Pig command: `name=[value]`).
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class PropertiesValue(_messages.Message):
    """[Optional] A mapping of property names to values, used to configure
    Pig. Properties that conflict with values set by the Cloud Dataproc API
    may be overwritten. Can include properties set in
    /etc/hadoop/conf/*-site.xml, /etc/pig/conf/pig.properties, and classes in
    user code.

    Messages:
      AdditionalProperty: An additional property for a PropertiesValue object.

    Fields:
      additionalProperties: Additional properties of type PropertiesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a PropertiesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ScriptVariablesValue(_messages.Message):
    """[Optional] Mapping of query variable names to values (equivalent to the
    Pig command: `name=[value]`).

    Messages:
      AdditionalProperty: An additional property for a ScriptVariablesValue
        object.

    Fields:
      additionalProperties: Additional properties of type ScriptVariablesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ScriptVariablesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  continueOnFailure = _messages.BooleanField(1)
  jarFileUris = _messages.StringField(2, repeated=True)
  loggingConfiguration = _messages.MessageField('LoggingConfiguration', 3)
  properties = _messages.MessageField('PropertiesValue', 4)
  queryFileUri = _messages.StringField(5)
  queryList = _messages.MessageField('QueryList', 6)
  scriptVariables = _messages.MessageField('ScriptVariablesValue', 7)


class PySparkJob(_messages.Message):
  """A Cloud Dataproc job for running PySpark applications on YARN.

  Messages:
    PropertiesValue: [Optional] A mapping of property names to values, used to
      configure PySpark. Properties that conflict with values set by the Cloud
      Dataproc API may be overwritten. Can include properties set in
      /etc/spark/conf/spark-defaults.conf and classes in user code.

  Fields:
    archiveUris: [Optional] HCFS URIs of archives to be extracted in the
      working directory of .jar, .tar, .tar.gz, .tgz, and .zip.
    args: [Optional] The arguments to pass to the driver.  Do not include
      arguments, such as `--conf`, that can be set as job properties, since a
      collision may occur that causes an incorrect job submission.
    fileUris: [Optional] HCFS URIs of files to be copied to the working
      directory of Python drivers and distributed tasks. Useful for naively
      parallel tasks.
    jarFileUris: [Optional] HCFS URIs of jar files to add to the CLASSPATHs of
      the Python driver and tasks.
    loggingConfiguration: [Optional] The runtime log configuration for job
      execution.
    mainPythonFileUri: [Required] The Hadoop Compatible Filesystem (HCFS) URI
      of the main Python file to use as the driver. Must be a .py file.
    properties: [Optional] A mapping of property names to values, used to
      configure PySpark. Properties that conflict with values set by the Cloud
      Dataproc API may be overwritten. Can include properties set in
      /etc/spark/conf/spark-defaults.conf and classes in user code.
    pythonFileUris: [Optional] HCFS file URIs of Python files to pass to the
      PySpark framework. Supported file types: .py, .egg, and .zip.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class PropertiesValue(_messages.Message):
    """[Optional] A mapping of property names to values, used to configure
    PySpark. Properties that conflict with values set by the Cloud Dataproc
    API may be overwritten. Can include properties set in /etc/spark/conf
    /spark-defaults.conf and classes in user code.

    Messages:
      AdditionalProperty: An additional property for a PropertiesValue object.

    Fields:
      additionalProperties: Additional properties of type PropertiesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a PropertiesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  archiveUris = _messages.StringField(1, repeated=True)
  args = _messages.StringField(2, repeated=True)
  fileUris = _messages.StringField(3, repeated=True)
  jarFileUris = _messages.StringField(4, repeated=True)
  loggingConfiguration = _messages.MessageField('LoggingConfiguration', 5)
  mainPythonFileUri = _messages.StringField(6)
  properties = _messages.MessageField('PropertiesValue', 7)
  pythonFileUris = _messages.StringField(8, repeated=True)


class QueryList(_messages.Message):
  """A list of queries to run on a cluster.

  Fields:
    queries: [Required] The queries to execute. You do not need to terminate a
      query with a semicolon. Multiple queries can be specified in one string
      by separating each with a semicolon. Here is an example of an Cloud
      Dataproc API snippet that uses a QueryList to specify a HiveJob:
      "hiveJob": {       "queryList": {         "queries": [
      "query1",           "query2",           "query3;query4",         ]
      }     }
  """

  queries = _messages.StringField(1, repeated=True)


class ReportTaskStatusRequest(_messages.Message):
  """A request to report task status, which may result in the corresponding
  lease being extended.

  Fields:
    agentId: The id of the agent reporting task status.
    currentWorkerTime: The current timestamp at the worker.
    status: Status for a single task.
  """

  agentId = _messages.StringField(1)
  currentWorkerTime = _messages.StringField(2)
  status = _messages.MessageField('TaskStatus', 3)


class ReportTaskStatusResponse(_messages.Message):
  """A response to a task status report.

  Fields:
    leaseExpirationTime: New task lease expiration timestamp in worker-local
      time.
    reportStatusInterval: The interval at which status should be reported.
  """

  leaseExpirationTime = _messages.StringField(1)
  reportStatusInterval = _messages.StringField(2)


class SoftwareConfiguration(_messages.Message):
  """Specifies the selection and configuration of software inside the cluster.

  Fields:
    imageVersion: [Optional] The version of software inside the cluster. It
      must match the regular expression `[0-9]+\.[0-9]+`. If unspecified, it
      will default to the latest version.
  """

  imageVersion = _messages.StringField(1)


class SparkJob(_messages.Message):
  """A Cloud Dataproc job for running Spark applications on YARN.

  Messages:
    PropertiesValue: [Optional] A mapping of property names to values, used to
      configure Spark. Properties that conflict with values set by the Cloud
      Dataproc API may be overwritten. Can include properties set in
      /etc/spark/conf/spark-defaults.conf and classes in user code.

  Fields:
    archiveUris: [Optional] HCFS URIs of archives to be extracted in the
      working directory of Spark drivers and tasks. Supported file types:
      .jar, .tar, .tar.gz, .tgz, and .zip.
    args: [Optional] The arguments to pass to the driver. Do not include
      arguments, such as `--conf`, that can be set as job properties, since a
      collision may occur that causes an incorrect job submission.
    fileUris: [Optional] HCFS URIs of files to be copied to the working
      directory of Spark drivers and distributed tasks. Useful for naively
      parallel tasks.
    jarFileUris: [Optional] HCFS URIs of jar files to add to the CLASSPATHs of
      the Spark driver and tasks.
    loggingConfiguration: [Optional] The runtime log configuration for job
      execution.
    mainClass: The name of the driver's main class. The jar file that contains
      the class must be in the default CLASSPATH or specified in
      `jar_file_uris`.
    mainJarFileUri: The Hadoop Compatible Filesystem (HCFS) URI of the jar
      file that contains the main class.
    properties: [Optional] A mapping of property names to values, used to
      configure Spark. Properties that conflict with values set by the Cloud
      Dataproc API may be overwritten. Can include properties set in
      /etc/spark/conf/spark-defaults.conf and classes in user code.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class PropertiesValue(_messages.Message):
    """[Optional] A mapping of property names to values, used to configure
    Spark. Properties that conflict with values set by the Cloud Dataproc API
    may be overwritten. Can include properties set in /etc/spark/conf/spark-
    defaults.conf and classes in user code.

    Messages:
      AdditionalProperty: An additional property for a PropertiesValue object.

    Fields:
      additionalProperties: Additional properties of type PropertiesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a PropertiesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  archiveUris = _messages.StringField(1, repeated=True)
  args = _messages.StringField(2, repeated=True)
  fileUris = _messages.StringField(3, repeated=True)
  jarFileUris = _messages.StringField(4, repeated=True)
  loggingConfiguration = _messages.MessageField('LoggingConfiguration', 5)
  mainClass = _messages.StringField(6)
  mainJarFileUri = _messages.StringField(7)
  properties = _messages.MessageField('PropertiesValue', 8)


class SparkSqlJob(_messages.Message):
  """A Cloud Dataproc job for running Spark SQL queries.

  Messages:
    PropertiesValue: [Optional] A mapping of property names to values, used to
      configure Spark SQL's SparkConf. Properties that conflict with values
      set by the Cloud Dataproc API may be overwritten.
    ScriptVariablesValue: [Optional] Mapping of query variable names to values
      (equivalent to the Spark SQL command: SET `name="value";`).

  Fields:
    jarFileUris: [Optional] HCFS URIs of jar files to be added to the Spark
      CLASSPATH.
    loggingConfiguration: [Optional] The runtime log configuration for job
      execution.
    properties: [Optional] A mapping of property names to values, used to
      configure Spark SQL's SparkConf. Properties that conflict with values
      set by the Cloud Dataproc API may be overwritten.
    queryFileUri: The HCFS URI of the script that contains SQL queries.
    queryList: A list of queries.
    scriptVariables: [Optional] Mapping of query variable names to values
      (equivalent to the Spark SQL command: SET `name="value";`).
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class PropertiesValue(_messages.Message):
    """[Optional] A mapping of property names to values, used to configure
    Spark SQL's SparkConf. Properties that conflict with values set by the
    Cloud Dataproc API may be overwritten.

    Messages:
      AdditionalProperty: An additional property for a PropertiesValue object.

    Fields:
      additionalProperties: Additional properties of type PropertiesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a PropertiesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ScriptVariablesValue(_messages.Message):
    """[Optional] Mapping of query variable names to values (equivalent to the
    Spark SQL command: SET `name="value";`).

    Messages:
      AdditionalProperty: An additional property for a ScriptVariablesValue
        object.

    Fields:
      additionalProperties: Additional properties of type ScriptVariablesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ScriptVariablesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  jarFileUris = _messages.StringField(1, repeated=True)
  loggingConfiguration = _messages.MessageField('LoggingConfiguration', 2)
  properties = _messages.MessageField('PropertiesValue', 3)
  queryFileUri = _messages.StringField(4)
  queryList = _messages.MessageField('QueryList', 5)
  scriptVariables = _messages.MessageField('ScriptVariablesValue', 6)


class StandardQueryParameters(_messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    bearer_token: OAuth bearer token.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    pp: Pretty-print response.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" or "email:<ldap>" to
      include in api requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    """Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    """V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default=u'json')
  bearer_token = _messages.StringField(4)
  callback = _messages.StringField(5)
  fields = _messages.StringField(6)
  key = _messages.StringField(7)
  oauth_token = _messages.StringField(8)
  pp = _messages.BooleanField(9, default=True)
  prettyPrint = _messages.BooleanField(10, default=True)
  quotaUser = _messages.StringField(11)
  trace = _messages.StringField(12)
  uploadType = _messages.StringField(13)
  upload_protocol = _messages.StringField(14)


class Status(_messages.Message):
  """The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). The error model is designed to be:
  - Simple to use and understand for most users - Flexible enough to meet
  unexpected needs  # Overview  The `Status` message contains three pieces of
  data: error code, error message, and error details. The error code should be
  an enum value of google.rpc.Code, but it may accept additional error codes
  if needed.  The error message should be a developer-facing English message
  that helps developers *understand* and *resolve* the error. If a localized
  user-facing error message is needed, put the localized message in the error
  details or localize it in the client. The optional error details may contain
  arbitrary information about the error. There is a predefined set of error
  detail types in the package `google.rpc` which can be used for common error
  conditions.  # Language mapping  The `Status` message is the logical
  representation of the error model, but it is not necessarily the actual wire
  format. When the `Status` message is exposed in different client libraries
  and different wire protocols, it can be mapped differently. For example, it
  will likely be mapped to some exceptions in Java, but more likely mapped to
  some error codes in C.  # Other uses  The error model and the `Status`
  message can be used in a variety of environments, either with or without
  APIs, to provide a consistent developer experience across different
  environments.  Example uses of this error model include:  - Partial errors.
  If a service needs to return partial errors to the client,     it may embed
  the `Status` in the normal response to indicate the partial     errors.  -
  Workflow errors. A typical workflow has multiple steps. Each step may
  have a `Status` message for error reporting purpose.  - Batch operations. If
  a client uses batch request and batch response, the     `Status` message
  should be used directly inside batch response, one for     each error sub-
  response.  - Asynchronous operations. If an API call embeds asynchronous
  operation     results in its response, the status of those operations should
  be     represented directly using the `Status` message.  - Logging. If some
  API errors are stored in logs, the message `Status` could     be used
  directly after any stripping needed for security/privacy reasons.

  Messages:
    DetailsValueListEntry: A DetailsValueListEntry object.

  Fields:
    code: The status code, which should be an enum value of google.rpc.Code.
    details: A list of messages that carry the error details.  There will be a
      common set of message types for APIs to use.
    message: A developer-facing error message, which should be in English. Any
      user-facing error message should be localized and sent in the
      google.rpc.Status.details field, or localized by the client.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DetailsValueListEntry(_messages.Message):
    """A DetailsValueListEntry object.

    Messages:
      AdditionalProperty: An additional property for a DetailsValueListEntry
        object.

    Fields:
      additionalProperties: Properties of the object. Contains field @ype with
        type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a DetailsValueListEntry object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  code = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  details = _messages.MessageField('DetailsValueListEntry', 2, repeated=True)
  message = _messages.StringField(3)


class SubmitJobRequest(_messages.Message):
  """A request to submit a job.

  Fields:
    job: [Required] The job resource.
  """

  job = _messages.MessageField('Job', 1)


class SystemTaskStatus(_messages.Message):
  """Status of cluster configuration task.

  Enums:
    StateValueValuesEnum: The outcome of reconfiguration.

  Fields:
    state: The outcome of reconfiguration.
  """

  class StateValueValuesEnum(_messages.Enum):
    """The outcome of reconfiguration.

    Values:
      STATE_UNSPECIFIED: State is unspecified.
      PENDING: Reconfiguration has not started, but request has been received
        by the agent.
      RUNNING: Reconfiguration is in-flight.
      FINISHED: Reconfiguration succeeded.
      FAILED: Reconfiguration failed.
    """
    STATE_UNSPECIFIED = 0
    PENDING = 1
    RUNNING = 2
    FINISHED = 3
    FAILED = 4

  state = _messages.EnumField('StateValueValuesEnum', 1)


class Task(_messages.Message):
  """A single Task for agent execution.  A task in Cloud Dataproc is a unit of
  work originating with the Cloud Dataproc service and intended for execution
  on a Cloud Dataproc agent. The most straightforward example of a Task in
  Cloud Dataproc is one corresponding to an end-user originated Job. This task
  is then allocated to an available agent for execution. Other examples of
  Cloud Dataproc Tasks could include executing system-maintenance scripts,
  periodic agent upgrades, etc.  Using the example of a Task corresponding to
  a Job, the flow through Cloud Dataproc will appear as:  - The end-user
  submits a Job to Cloud Dataproc for execution. - The Cloud Dataproc service
  determines the best Cluster to execute the Job on    and creates a Task for
  the job. - An agent polls Cloud Dataproc for outstanding Tasks via the
  LeaseTasks    method and the Task created in step 2 is provided to the
  agent. - During execution of the Task, the agent updates the Task status via
  the ReportTaskStatus method. - Upon completion of a Task, the agent will
  finally ReportTaskStatus    with a TaskStatus indicating the status of the
  driver application's    exit status. - The Cloud Dataproc service updates
  the status of the user-submitted Job    using the Task status reported by
  the agent.

  Fields:
    configuration: Configuration for this task.
    status: The status of a task.
    taskId: System defined task id.
  """

  configuration = _messages.MessageField('TaskConfiguration', 1)
  status = _messages.MessageField('TaskStatus', 2)
  taskId = _messages.StringField(3)


class TaskClusterConfiguration(_messages.Message):
  """A system task corresponding to a request for Master node to update
  configuration based on provided values.

  Enums:
    TypeValueValuesEnum: Type of configuration change.

  Fields:
    addMembers: New nodes to register with cluster.
    removeMembers: Existing nodes to decommission.
    type: Type of configuration change.
  """

  class TypeValueValuesEnum(_messages.Enum):
    """Type of configuration change.

    Values:
      TYPE_UNSPECIFIED: No type specified. This is an invalid configuration.
      TYPE_CLUSTER_MEMBERSHIP_CHANGE: Adding or removing nodes to cluster.
    """
    TYPE_UNSPECIFIED = 0
    TYPE_CLUSTER_MEMBERSHIP_CHANGE = 1

  addMembers = _messages.StringField(1, repeated=True)
  removeMembers = _messages.StringField(2, repeated=True)
  type = _messages.EnumField('TypeValueValuesEnum', 3)


class TaskConfiguration(_messages.Message):
  """Configuration for a Dataproc Task.

  Fields:
    clusterConfiguration: Cluster reconfiguration task.
    jobConfiguration: Configuration of a Job-based task.
    maintenanceCommand: Execute cluster maintenance command.
  """

  clusterConfiguration = _messages.MessageField('TaskClusterConfiguration', 1)
  jobConfiguration = _messages.MessageField('TaskJobConfiguration', 2)
  maintenanceCommand = _messages.MessageField('TaskMaintenanceCommand', 3)


class TaskJobConfiguration(_messages.Message):
  """A task corresponding to a single job execution request.

  Enums:
    TypeValueValuesEnum: The type of the job.

  Messages:
    PropertiesValue: Properties for the submitted job.
    ScriptVariablesValue: Variables to be substituted in Pig and Hive scripts.

  Fields:
    archiveUris: Required archives for the driver program or distributed
      program. Used by Hadoop, Spark, and PySpark jobs.
    args: Arguments for the driver program. Used by Hadoop, Spark, and PySpark
      jobs.
    continueOnFailure: True to continue processing pig or hive queries if an
      earlier query fails.
    driverControlFilesUri: [Output-only] If present, the location of
      miscellaneous control files which may be used as part of job setup and
      handling. If not present, control files may be placed in the same
      location as driver_output_uri.
    driverInputUri: [Output-only] A URI pointing to the location of the stdin
      of the job's driver program, only set if the job is interactive.
    driverOutputUri: Output URI for driver output.
    fileUris: Required files for the driver program or distributed program.
      Used by Hadoop, Spark, and PySpark jobs.
    interactive: [Optional] If set to true, then the driver's stdin will be
      kept open and driver_input_uri will be set to provide a path at which
      additional input can be sent to the driver.
    jarFileUris: JAR files that are required by the job.
    loggingConfiguration: Logging configuration for the job.
    mainClass: A class name that is contained either in core Hadoop or Spark
      libraries or within a JAR specified within jar_file_uris.
    mainJarFileUri: A JAR containing the main driver and containing a METADATA
      entry for a main class contained within the jar.
    mainPythonFileUri: The main Python file for a PySpark application.
    properties: Properties for the submitted job.
    pythonFileUris: URIs of files required by the PySpark application
    queryFileUri: A URI of a file containing queries
    queryList: A list of queries specified within the API.
    scriptVariables: Variables to be substituted in Pig and Hive scripts.
    submittedBy: The user that the job should be attributed to in Hadoop as a
      posix-style username. If the user is not a member of the system's user-
      database, the task will be started as a system account.
    type: The type of the job.
  """

  class TypeValueValuesEnum(_messages.Enum):
    """The type of the job.

    Values:
      TYPE_UNSPECIFIED: No type specified. This is an invalid configuration.
      HADOOP: A hadoop job.
      SPARK: A spark job.
      PYSPARK: A pyspark job.
      HIVE: A hive job.
      PIG: A pig job.
      SPARK_SQL: A spark-sql job.
    """
    TYPE_UNSPECIFIED = 0
    HADOOP = 1
    SPARK = 2
    PYSPARK = 3
    HIVE = 4
    PIG = 5
    SPARK_SQL = 6

  @encoding.MapUnrecognizedFields('additionalProperties')
  class PropertiesValue(_messages.Message):
    """Properties for the submitted job.

    Messages:
      AdditionalProperty: An additional property for a PropertiesValue object.

    Fields:
      additionalProperties: Additional properties of type PropertiesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a PropertiesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ScriptVariablesValue(_messages.Message):
    """Variables to be substituted in Pig and Hive scripts.

    Messages:
      AdditionalProperty: An additional property for a ScriptVariablesValue
        object.

    Fields:
      additionalProperties: Additional properties of type ScriptVariablesValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ScriptVariablesValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  archiveUris = _messages.StringField(1, repeated=True)
  args = _messages.StringField(2, repeated=True)
  continueOnFailure = _messages.BooleanField(3)
  driverControlFilesUri = _messages.StringField(4)
  driverInputUri = _messages.StringField(5)
  driverOutputUri = _messages.StringField(6)
  fileUris = _messages.StringField(7, repeated=True)
  interactive = _messages.BooleanField(8)
  jarFileUris = _messages.StringField(9, repeated=True)
  loggingConfiguration = _messages.MessageField('TaskLoggingConfiguration', 10)
  mainClass = _messages.StringField(11)
  mainJarFileUri = _messages.StringField(12)
  mainPythonFileUri = _messages.StringField(13)
  properties = _messages.MessageField('PropertiesValue', 14)
  pythonFileUris = _messages.StringField(15, repeated=True)
  queryFileUri = _messages.StringField(16)
  queryList = _messages.MessageField('TaskQueryList', 17)
  scriptVariables = _messages.MessageField('ScriptVariablesValue', 18)
  submittedBy = _messages.StringField(19)
  type = _messages.EnumField('TypeValueValuesEnum', 20)


class TaskJobStatus(_messages.Message):
  """Status of a single job-based task.

  Enums:
    DriverStateValueValuesEnum: The state of the driver.

  Fields:
    driverExitCode: If the driver has exited, its exit code.
    driverState: The state of the driver.
    yarnApplications: A list of YARN applications that have been launched for
      this task.
  """

  class DriverStateValueValuesEnum(_messages.Enum):
    """The state of the driver.

    Values:
      DRIVER_STATE_UNSPECIFIED: The state is unspecified.
      PENDING: The driver has not yet been started, but it's known to the
        agent.
      RUNNING: The driver is running.
      KILL_PENDING: A kill command has been received and the agent is shutting
        down the driver.
      KILLED: The driver has been killed.
      FINISHED: The driver finished successfully.
      FAILED: The driver failed.
    """
    DRIVER_STATE_UNSPECIFIED = 0
    PENDING = 1
    RUNNING = 2
    KILL_PENDING = 3
    KILLED = 4
    FINISHED = 5
    FAILED = 6

  driverExitCode = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  driverState = _messages.EnumField('DriverStateValueValuesEnum', 2)
  yarnApplications = _messages.MessageField('TaskYarnApplication', 3, repeated=True)


class TaskLoggingConfiguration(_messages.Message):
  """Logging configuration for the task.

  Messages:
    LogLevelsValue: Map of logger name to log4j log level.

  Fields:
    logLevels: Map of logger name to log4j log level.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class LogLevelsValue(_messages.Message):
    """Map of logger name to log4j log level.

    Messages:
      AdditionalProperty: An additional property for a LogLevelsValue object.

    Fields:
      additionalProperties: Additional properties of type LogLevelsValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a LogLevelsValue object.

      Enums:
        ValueValueValuesEnum:

      Fields:
        key: Name of the additional property.
        value: A ValueValueValuesEnum attribute.
      """

      class ValueValueValuesEnum(_messages.Enum):
        """ValueValueValuesEnum enum type.

        Values:
          LEVEL_UNSPECIFIED: <no description>
          ALL: <no description>
          TRACE: <no description>
          DEBUG: <no description>
          INFO: <no description>
          WARN: <no description>
          ERROR: <no description>
          FATAL: <no description>
          OFF: <no description>
        """
        LEVEL_UNSPECIFIED = 0
        ALL = 1
        TRACE = 2
        DEBUG = 3
        INFO = 4
        WARN = 5
        ERROR = 6
        FATAL = 7
        OFF = 8

      key = _messages.StringField(1)
      value = _messages.EnumField('ValueValueValuesEnum', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  logLevels = _messages.MessageField('LogLevelsValue', 1)


class TaskMaintenanceCommand(_messages.Message):
  """A system task corresponding to a request to run a maintenance command on
  targeted agent.

  Messages:
    EnvironmentValue: The environment variables.

  Fields:
    args: Arguments to pass to the script.
    environment: The environment variables.
    gcsUri: The executable is stored on GCS.
    localPath: The executable is a file on agent.
    scriptOutputUri: The GCS URI where executable output will be stored.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class EnvironmentValue(_messages.Message):
    """The environment variables.

    Messages:
      AdditionalProperty: An additional property for a EnvironmentValue
        object.

    Fields:
      additionalProperties: Additional properties of type EnvironmentValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a EnvironmentValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  args = _messages.StringField(1, repeated=True)
  environment = _messages.MessageField('EnvironmentValue', 2)
  gcsUri = _messages.StringField(3)
  localPath = _messages.StringField(4)
  scriptOutputUri = _messages.StringField(5)


class TaskQueryList(_messages.Message):
  """A list of queries to execute as part of the task.

  Fields:
    queries: The queries to execute. The format of the queries is task-type
      dependent, but in each case each query should be executed within its own
      invocation of the interpreter for that task type.
  """

  queries = _messages.StringField(1, repeated=True)


class TaskStatus(_messages.Message):
  """Status for a single Task.

  Fields:
    jobStatus: The status of the Job.
    systemTaskStatus: The status of the SystemTask.
  """

  jobStatus = _messages.MessageField('TaskJobStatus', 1)
  systemTaskStatus = _messages.MessageField('SystemTaskStatus', 2)


class TaskYarnApplication(_messages.Message):
  """YARN applications that have been associated with a task.

  Enums:
    StateValueValuesEnum: The state of the YARN application.

  Fields:
    id: YARN application id.
    name: YARN application name.
    progress: The progress of the YARN application.
    state: The state of the YARN application.
    trackingUrl: The tracking URL for the YARN application. This URL may or
      may not be accessible from outside the cluster.
  """

  class StateValueValuesEnum(_messages.Enum):
    """The state of the YARN application.

    Values:
      STATE_UNSPECIFIED: Status is unspecified.
      NEW: Status is NEW.
      NEW_SAVING: Status is NEW_SAVING.
      SUBMITTED: Status is SUBMITTED.
      ACCEPTED: Status is ACCEPTED.
      RUNNING: Status is RUNNING.
      FINISHED: Status is FINISHED.
      FAILED: Status is FAILED.
      KILLED: Status is KILLED.
    """
    STATE_UNSPECIFIED = 0
    NEW = 1
    NEW_SAVING = 2
    SUBMITTED = 3
    ACCEPTED = 4
    RUNNING = 5
    FINISHED = 6
    FAILED = 7
    KILLED = 8

  id = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  name = _messages.StringField(2)
  progress = _messages.FloatField(3, variant=_messages.Variant.FLOAT)
  state = _messages.EnumField('StateValueValuesEnum', 4)
  trackingUrl = _messages.StringField(5)


class YarnApplication(_messages.Message):
  """A YARN application created by a job. Application information is a subset
  of
  <code>org.apache.hadoop.yarn.proto.YarnProtos.ApplicationReportProto</code>.

  Enums:
    StateValueValuesEnum: [Required] The application state.

  Fields:
    name: [Required] The application name.
    progress: [Required] The numerical progress of the application, from 1 to
      100.
    state: [Required] The application state.
    trackingUrl: [Optional] The HTTP URL of the ApplicationMaster,
      HistoryServer, or TimelineServer that provides application-specific
      information. The URL uses the internal hostname, and requires a proxy
      server for resolution and, possibly, access.
  """

  class StateValueValuesEnum(_messages.Enum):
    """[Required] The application state.

    Values:
      STATE_UNSPECIFIED: Status is unspecified.
      NEW: Status is NEW.
      NEW_SAVING: Status is NEW_SAVING.
      SUBMITTED: Status is SUBMITTED.
      ACCEPTED: Status is ACCEPTED.
      RUNNING: Status is RUNNING.
      FINISHED: Status is FINISHED.
      FAILED: Status is FAILED.
      KILLED: Status is KILLED.
    """
    STATE_UNSPECIFIED = 0
    NEW = 1
    NEW_SAVING = 2
    SUBMITTED = 3
    ACCEPTED = 4
    RUNNING = 5
    FINISHED = 6
    FAILED = 7
    KILLED = 8

  name = _messages.StringField(1)
  progress = _messages.FloatField(2, variant=_messages.Variant.FLOAT)
  state = _messages.EnumField('StateValueValuesEnum', 3)
  trackingUrl = _messages.StringField(4)


encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1',
    package=u'dataproc')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2',
    package=u'dataproc')
encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv',
    package=u'dataproc')
