"""Generated client library for dataproc version v1beta1."""
# NOTE: This file is autogenerated and should not be edited by hand.

from googlecloudsdk.third_party.apitools.base.py import base_api
from googlecloudsdk.third_party.apis.dataproc.v1beta1 import dataproc_v1beta1_messages as messages


class DataprocV1beta1(base_api.BaseApiClient):
  """Generated client library for service dataproc version v1beta1."""

  MESSAGES_MODULE = messages

  _PACKAGE = u'dataproc'
  _SCOPES = [u'https://www.googleapis.com/auth/cloud-platform', u'https://www.googleapis.com/auth/logging.admin', u'https://www.googleapis.com/auth/logging.read', u'https://www.googleapis.com/auth/logging.write']
  _VERSION = u'v1beta1'
  _CLIENT_ID = '1042881264118.apps.googleusercontent.com'
  _CLIENT_SECRET = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _USER_AGENT = ''
  _CLIENT_CLASS_NAME = u'DataprocV1beta1'
  _URL_VERSION = u'v1beta1'

  def __init__(self, url='', credentials=None,
               get_credentials=True, http=None, model=None,
               log_request=False, log_response=False,
               credentials_args=None, default_global_params=None,
               additional_http_headers=None):
    """Create a new dataproc handle."""
    url = url or u'https://dataproc.googleapis.com/'
    super(DataprocV1beta1, self).__init__(
        url, credentials=credentials,
        get_credentials=get_credentials, http=http, model=model,
        log_request=log_request, log_response=log_response,
        credentials_args=credentials_args,
        default_global_params=default_global_params,
        additional_http_headers=additional_http_headers)
    self.operations = self.OperationsService(self)
    self.projects_clusters_agents = self.ProjectsClustersAgentsService(self)
    self.projects_clusters_tasks = self.ProjectsClustersTasksService(self)
    self.projects_clusters = self.ProjectsClustersService(self)
    self.projects_jobs = self.ProjectsJobsService(self)
    self.projects = self.ProjectsService(self)

  class OperationsService(base_api.BaseApiService):
    """Service class for the operations resource."""

    _NAME = u'operations'

    def __init__(self, client):
      super(DataprocV1beta1.OperationsService, self).__init__(client)
      self._method_configs = {
          'Cancel': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'dataproc.operations.cancel',
              ordered_params=[u'name'],
              path_params=[u'name'],
              query_params=[],
              relative_path=u'v1beta1/{+name}:cancel',
              request_field=u'cancelOperationRequest',
              request_type_name=u'DataprocOperationsCancelRequest',
              response_type_name=u'Empty',
              supports_download=False,
          ),
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'dataproc.operations.delete',
              ordered_params=[u'name'],
              path_params=[u'name'],
              query_params=[],
              relative_path=u'v1beta1/{+name}',
              request_field='',
              request_type_name=u'DataprocOperationsDeleteRequest',
              response_type_name=u'Empty',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'dataproc.operations.get',
              ordered_params=[u'name'],
              path_params=[u'name'],
              query_params=[],
              relative_path=u'v1beta1/{+name}',
              request_field='',
              request_type_name=u'DataprocOperationsGetRequest',
              response_type_name=u'Operation',
              supports_download=False,
          ),
          'List': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'dataproc.operations.list',
              ordered_params=[u'name'],
              path_params=[u'name'],
              query_params=[u'filter', u'pageSize', u'pageToken'],
              relative_path=u'v1beta1/{+name}',
              request_field='',
              request_type_name=u'DataprocOperationsListRequest',
              response_type_name=u'ListOperationsResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Cancel(self, request, global_params=None):
      """Starts asynchronous cancellation on a long-running operation.  The server.
makes a best effort to cancel the operation, but success is not
guaranteed.  If the server doesn't support this method, it returns
`google.rpc.Code.UNIMPLEMENTED`.  Clients can use
[operations.get](/dataproc/reference/rest/v1beta1/operations/get) or
other methods to check whether the cancellation succeeded or whether the
operation completed despite cancellation.

      Args:
        request: (DataprocOperationsCancelRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Empty) The response message.
      """
      config = self.GetMethodConfig('Cancel')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Delete(self, request, global_params=None):
      """Deletes a long-running operation. This method indicates that the client is.
no longer interested in the operation result. It does not cancel the
operation. If the server doesn't support this method, it returns
`google.rpc.Code.UNIMPLEMENTED`.

      Args:
        request: (DataprocOperationsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Empty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets the latest state of a long-running operation.  Clients can use this.
method to poll the operation result at intervals as recommended by the API
service.

      Args:
        request: (DataprocOperationsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Operation) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def List(self, request, global_params=None):
      """Lists operations that match the specified filter in the request. If the.
server doesn't support this method, it returns `UNIMPLEMENTED`.

NOTE: the `name` binding below allows API services to override the binding
to use different resource name schemes, such as `users/*/operations`.

      Args:
        request: (DataprocOperationsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListOperationsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ProjectsClustersAgentsService(base_api.BaseApiService):
    """Service class for the projects_clusters_agents resource."""

    _NAME = u'projects_clusters_agents'

    def __init__(self, client):
      super(DataprocV1beta1.ProjectsClustersAgentsService, self).__init__(client)
      self._method_configs = {
          'Create': base_api.ApiMethodInfo(
              http_method=u'PUT',
              method_id=u'dataproc.projects.clusters.agents.create',
              ordered_params=[u'projectId', u'clusterUuid', u'agentId'],
              path_params=[u'agentId', u'clusterUuid', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterUuid}/agents/{agentId}',
              request_field=u'agent',
              request_type_name=u'DataprocProjectsClustersAgentsCreateRequest',
              response_type_name=u'Agent',
              supports_download=False,
          ),
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'dataproc.projects.clusters.agents.delete',
              ordered_params=[u'projectId', u'clusterUuid', u'agentId'],
              path_params=[u'agentId', u'clusterUuid', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterUuid}/agents/{agentId}',
              request_field='',
              request_type_name=u'DataprocProjectsClustersAgentsDeleteRequest',
              response_type_name=u'Empty',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'dataproc.projects.clusters.agents.get',
              ordered_params=[u'projectId', u'clusterUuid', u'agentId'],
              path_params=[u'agentId', u'clusterUuid', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterUuid}/agents/{agentId}',
              request_field='',
              request_type_name=u'DataprocProjectsClustersAgentsGetRequest',
              response_type_name=u'Agent',
              supports_download=False,
          ),
          'List': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'dataproc.projects.clusters.agents.list',
              ordered_params=[u'projectId', u'clusterUuid'],
              path_params=[u'clusterUuid', u'projectId'],
              query_params=[u'pageSize', u'pageToken'],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterUuid}/agents',
              request_field='',
              request_type_name=u'DataprocProjectsClustersAgentsListRequest',
              response_type_name=u'ListAgentsResponse',
              supports_download=False,
          ),
          'Update': base_api.ApiMethodInfo(
              http_method=u'PUT',
              method_id=u'dataproc.projects.clusters.agents.update',
              ordered_params=[u'projectId', u'clusterUuid', u'agentId'],
              path_params=[u'agentId', u'clusterUuid', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterUuid}/agents/{agentId}',
              request_field=u'agent',
              request_type_name=u'DataprocProjectsClustersAgentsUpdateRequest',
              response_type_name=u'Agent',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Add a new agent to Dataproc's view of a cluster. This is the first.
Dataproc method that an agent should invoke after starting. If an
agent has already been created with the given agent_id within
the same cluster, this method will return a Conflict status code
and the agent is expected to call GetAgent to retrieve the
last registration and subsequently call UpdateAgent, if required.

      Args:
        request: (DataprocProjectsClustersAgentsCreateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Agent) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Delete(self, request, global_params=None):
      """Delete an agent from Dataproc's view of a cluster. Deleting an.
agent is not required, but could be used in a shutdown sequence
to indicate to Dataproc that the agent is to be considered dead
and all agent-owned resources and tasks are free to be re-distributed.

      Args:
        request: (DataprocProjectsClustersAgentsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Empty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Retrieve an agent.

      Args:
        request: (DataprocProjectsClustersAgentsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Agent) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def List(self, request, global_params=None):
      """List all agents Dataproc is aware of within a cluster.

      Args:
        request: (DataprocProjectsClustersAgentsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListAgentsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Update(self, request, global_params=None):
      """Update Dataproc's view of an agent. This is currently used to provide a.
is_healthy bit, but is expected to be extended to include daemon
information and VM metrics for inclusion in cloud metrics.

      Args:
        request: (DataprocProjectsClustersAgentsUpdateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Agent) The response message.
      """
      config = self.GetMethodConfig('Update')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ProjectsClustersTasksService(base_api.BaseApiService):
    """Service class for the projects_clusters_tasks resource."""

    _NAME = u'projects_clusters_tasks'

    def __init__(self, client):
      super(DataprocV1beta1.ProjectsClustersTasksService, self).__init__(client)
      self._method_configs = {
          'Lease': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'dataproc.projects.clusters.tasks.lease',
              ordered_params=[u'projectId', u'clusterUuid'],
              path_params=[u'clusterUuid', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterUuid}/tasks:lease',
              request_field=u'leaseTasksRequest',
              request_type_name=u'DataprocProjectsClustersTasksLeaseRequest',
              response_type_name=u'LeaseTasksResponse',
              supports_download=False,
          ),
          'Report': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'dataproc.projects.clusters.tasks.report',
              ordered_params=[u'projectId', u'clusterUuid', u'taskId'],
              path_params=[u'clusterUuid', u'projectId', u'taskId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterUuid}/tasks/{taskId}:report',
              request_field=u'reportTaskStatusRequest',
              request_type_name=u'DataprocProjectsClustersTasksReportRequest',
              response_type_name=u'ReportTaskStatusResponse',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Lease(self, request, global_params=None):
      """Obtain a lease on one or more tasks. Any given task may be in any state.
and each agent is expected to start any non-started tasks and to monitor
any YarnApplications spawned by any already running tasks. It's expected
that monitoring previously launched tasks will be more prevalent when
drivers are run entirely within YARN containers.

While there's a single lease expiration time, in the event of multiple
tasks being leased to the agent in a single call, each task has a
unique lease and status must be reported before the lease times out or
the task can be considered orphaned.

The service will determine how many tasks to lease to agents in a single
call.

      Args:
        request: (DataprocProjectsClustersTasksLeaseRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (LeaseTasksResponse) The response message.
      """
      config = self.GetMethodConfig('Lease')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Report(self, request, global_params=None):
      """Report status for a task and extend the lease provided for the task.

      Args:
        request: (DataprocProjectsClustersTasksReportRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ReportTaskStatusResponse) The response message.
      """
      config = self.GetMethodConfig('Report')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ProjectsClustersService(base_api.BaseApiService):
    """Service class for the projects_clusters resource."""

    _NAME = u'projects_clusters'

    def __init__(self, client):
      super(DataprocV1beta1.ProjectsClustersService, self).__init__(client)
      self._method_configs = {
          'Create': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'dataproc.projects.clusters.create',
              ordered_params=[u'projectId'],
              path_params=[u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters',
              request_field='<request>',
              request_type_name=u'Cluster',
              response_type_name=u'Operation',
              supports_download=False,
          ),
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'dataproc.projects.clusters.delete',
              ordered_params=[u'projectId', u'clusterName'],
              path_params=[u'clusterName', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterName}',
              request_field='',
              request_type_name=u'DataprocProjectsClustersDeleteRequest',
              response_type_name=u'Operation',
              supports_download=False,
          ),
          'Diagnose': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'dataproc.projects.clusters.diagnose',
              ordered_params=[u'projectId', u'clusterName'],
              path_params=[u'clusterName', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterName}:diagnose',
              request_field=u'diagnoseClusterRequest',
              request_type_name=u'DataprocProjectsClustersDiagnoseRequest',
              response_type_name=u'Operation',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'dataproc.projects.clusters.get',
              ordered_params=[u'projectId', u'clusterName'],
              path_params=[u'clusterName', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterName}',
              request_field='',
              request_type_name=u'DataprocProjectsClustersGetRequest',
              response_type_name=u'Cluster',
              supports_download=False,
          ),
          'List': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'dataproc.projects.clusters.list',
              ordered_params=[u'projectId'],
              path_params=[u'projectId'],
              query_params=[u'pageSize', u'pageToken'],
              relative_path=u'v1beta1/projects/{projectId}/clusters',
              request_field='',
              request_type_name=u'DataprocProjectsClustersListRequest',
              response_type_name=u'ListClustersResponse',
              supports_download=False,
          ),
          'Patch': base_api.ApiMethodInfo(
              http_method=u'PATCH',
              method_id=u'dataproc.projects.clusters.patch',
              ordered_params=[u'projectId', u'clusterName'],
              path_params=[u'clusterName', u'projectId'],
              query_params=[u'updateMask'],
              relative_path=u'v1beta1/projects/{projectId}/clusters/{clusterName}',
              request_field=u'cluster',
              request_type_name=u'DataprocProjectsClustersPatchRequest',
              response_type_name=u'Operation',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Creates a cluster in a project.

      Args:
        request: (Cluster) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Operation) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Delete(self, request, global_params=None):
      """Deletes a cluster in a project.

      Args:
        request: (DataprocProjectsClustersDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Operation) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Diagnose(self, request, global_params=None):
      """Gets cluster diagnostic information.
Once the operation completes, the Operation.response field
contains DiagnoseClusterOutputLocation.

      Args:
        request: (DataprocProjectsClustersDiagnoseRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Operation) The response message.
      """
      config = self.GetMethodConfig('Diagnose')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets the resource representation for a cluster in a project.

      Args:
        request: (DataprocProjectsClustersGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Cluster) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def List(self, request, global_params=None):
      """Lists all clusters in a project.

      Args:
        request: (DataprocProjectsClustersListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListClustersResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Patch(self, request, global_params=None):
      """Updates a cluster in a project.

      Args:
        request: (DataprocProjectsClustersPatchRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Operation) The response message.
      """
      config = self.GetMethodConfig('Patch')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ProjectsJobsService(base_api.BaseApiService):
    """Service class for the projects_jobs resource."""

    _NAME = u'projects_jobs'

    def __init__(self, client):
      super(DataprocV1beta1.ProjectsJobsService, self).__init__(client)
      self._method_configs = {
          'Cancel': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'dataproc.projects.jobs.cancel',
              ordered_params=[u'projectId', u'jobId'],
              path_params=[u'jobId', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/jobs/{jobId}:cancel',
              request_field=u'cancelJobRequest',
              request_type_name=u'DataprocProjectsJobsCancelRequest',
              response_type_name=u'Job',
              supports_download=False,
          ),
          'Delete': base_api.ApiMethodInfo(
              http_method=u'DELETE',
              method_id=u'dataproc.projects.jobs.delete',
              ordered_params=[u'projectId', u'jobId'],
              path_params=[u'jobId', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/jobs/{jobId}',
              request_field='',
              request_type_name=u'DataprocProjectsJobsDeleteRequest',
              response_type_name=u'Empty',
              supports_download=False,
          ),
          'Get': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'dataproc.projects.jobs.get',
              ordered_params=[u'projectId', u'jobId'],
              path_params=[u'jobId', u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/jobs/{jobId}',
              request_field='',
              request_type_name=u'DataprocProjectsJobsGetRequest',
              response_type_name=u'Job',
              supports_download=False,
          ),
          'List': base_api.ApiMethodInfo(
              http_method=u'GET',
              method_id=u'dataproc.projects.jobs.list',
              ordered_params=[u'projectId'],
              path_params=[u'projectId'],
              query_params=[u'clusterName', u'jobStateMatcher', u'pageSize', u'pageToken'],
              relative_path=u'v1beta1/projects/{projectId}/jobs',
              request_field='',
              request_type_name=u'DataprocProjectsJobsListRequest',
              response_type_name=u'ListJobsResponse',
              supports_download=False,
          ),
          'Submit': base_api.ApiMethodInfo(
              http_method=u'POST',
              method_id=u'dataproc.projects.jobs.submit',
              ordered_params=[u'projectId'],
              path_params=[u'projectId'],
              query_params=[],
              relative_path=u'v1beta1/projects/{projectId}/jobs:submit',
              request_field=u'submitJobRequest',
              request_type_name=u'DataprocProjectsJobsSubmitRequest',
              response_type_name=u'Job',
              supports_download=False,
          ),
          }

      self._upload_configs = {
          }

    def Cancel(self, request, global_params=None):
      """Starts a job cancellation request. To access the job resource.
after cancellation, call
[jobs.list](/dataproc/reference/rest/v1beta1/projects.jobs/list) or
[jobs.get](/dataproc/reference/rest/v1beta1/projects.jobs/get).

      Args:
        request: (DataprocProjectsJobsCancelRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Job) The response message.
      """
      config = self.GetMethodConfig('Cancel')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Delete(self, request, global_params=None):
      """Deletes the job from the project. If the job is active, the delete fails,.
and the response returns `FAILED_PRECONDITION`.

      Args:
        request: (DataprocProjectsJobsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Empty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Get(self, request, global_params=None):
      """Gets the resource representation for a job in a project.

      Args:
        request: (DataprocProjectsJobsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Job) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    def List(self, request, global_params=None):
      """Lists jobs in a project.

      Args:
        request: (DataprocProjectsJobsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (ListJobsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    def Submit(self, request, global_params=None):
      """Submits a job to a cluster.

      Args:
        request: (DataprocProjectsJobsSubmitRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (Job) The response message.
      """
      config = self.GetMethodConfig('Submit')
      return self._RunMethod(
          config, request, global_params=global_params)

  class ProjectsService(base_api.BaseApiService):
    """Service class for the projects resource."""

    _NAME = u'projects'

    def __init__(self, client):
      super(DataprocV1beta1.ProjectsService, self).__init__(client)
      self._method_configs = {
          }

      self._upload_configs = {
          }
