"""Generated message classes for ml version v1beta1.

An API to enable creating and using machine learning models.
"""
# NOTE: This file is autogenerated and should not be edited by hand.

from apitools.base.protorpclite import messages as _messages
from apitools.base.py import encoding
from apitools.base.py import extra_types


package = 'ml'


class GoogleApiHttpBody(_messages.Message):
  """Message that represents an arbitrary HTTP body. It should only be used
  for payload formats that can't be represented as JSON, such as raw binary or
  an HTML page.   This message can be used both in streaming and non-streaming
  API methods in the request as well as the response.  It can be used as a
  top-level request field, which is convenient if one wants to extract
  parameters from either the URL or HTTP template into the request fields and
  also want access to the raw HTTP body.  Example:      message
  GetResourceRequest {       // A unique request id.       string request_id =
  1;        // The raw HTTP body is bound to this field.
  google.api.HttpBody http_body = 2;     }      service ResourceService {
  rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);       rpc
  UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty);     }
  Example with streaming methods:      service CaldavService {       rpc
  GetCalendar(stream google.api.HttpBody)         returns (stream
  google.api.HttpBody);       rpc UpdateCalendar(stream google.api.HttpBody)
  returns (stream google.api.HttpBody);     }  Use of this type only changes
  how the request and response bodies are handled, all other features will
  continue to work unchanged.

  Fields:
    contentType: The HTTP Content-Type string representing the content type of
      the body.
    data: HTTP body binary data.
  """

  contentType = _messages.StringField(1)
  data = _messages.BytesField(2)


class GoogleCloudMlV1alpha3CreateVersionRequest(_messages.Message):
  """Uploads the provided trained model version to Cloud Machine Learning.

  Fields:
    parent: The name of the model.
    version: The version details.
  """

  parent = _messages.StringField(1)
  version = _messages.MessageField('GoogleCloudMlV1alpha3Version', 2)


class GoogleCloudMlV1alpha3HyperparameterJobResult(_messages.Message):
  """Represents the result of a hyperparameter tuning run from a training job.

  Messages:
    HyperparametersValue: The hyperparameters given to this run.

  Fields:
    bestObjectiveValue: The best objective value seen for this run.
    bestTrainingStep: The training step associated with the best objective
      value.
    hyperparameters: The hyperparameters given to this run.
    runId: The run id for these results.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class HyperparametersValue(_messages.Message):
    """The hyperparameters given to this run.

    Messages:
      AdditionalProperty: An additional property for a HyperparametersValue
        object.

    Fields:
      additionalProperties: Additional properties of type HyperparametersValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a HyperparametersValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  bestObjectiveValue = _messages.FloatField(1)
  bestTrainingStep = _messages.IntegerField(2)
  hyperparameters = _messages.MessageField('HyperparametersValue', 3)
  runId = _messages.StringField(4)


class GoogleCloudMlV1alpha3HyperparameterSpec(_messages.Message):
  """Represents a set of hyperparameters to optimize.

  Enums:
    GoalValueValuesEnum: Should the evaluation metric be maximized or
      minimized?

  Fields:
    goal: Should the evaluation metric be maximized or minimized?
    maxParallelRuns: How many training runs should be run in parallel. More
      parallelization will be faster, but parallel runs only benefit from the
      information gained by previous runs. Each run will use the number of
      workers specified by the worker, parameter server, and evaluator specs.
      Defaults to one.
    maxRuns: How many training runs should be attempted to optimize. Defaults
      to one.
    params: The set of parameters to tune.
  """

  class GoalValueValuesEnum(_messages.Enum):
    """Should the evaluation metric be maximized or minimized?

    Values:
      GOAL_TYPE_UNSPECIFIED: Goal Type will default to maximize.
      MAXIMIZE: Maximize the goal metric.
      MINIMIZE: Minimize the goal metric.
    """
    GOAL_TYPE_UNSPECIFIED = 0
    MAXIMIZE = 1
    MINIMIZE = 2

  goal = _messages.EnumField('GoalValueValuesEnum', 1)
  maxParallelRuns = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  maxRuns = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  params = _messages.MessageField('GoogleCloudMlV1alpha3ParameterConfig', 4, repeated=True)


class GoogleCloudMlV1alpha3JobMetadata(_messages.Message):
  """Represents the metadata of the longrunning.Operation created by the
  SubmitTrainingJob or SubmitPredictionJob method.

  Enums:
    JobStateValueValuesEnum: The detailed state of a job.

  Messages:
    StatusMetricsSnapshotValue: Progress report. A set of key-value pairs that
      convey the current state of the job.

  Fields:
    createTime: When the job was submitted.
    createVersionRequest: The create version job request recorded. The create
      version job request recorded.
    endTime: When the job processing was completed.
    isCancellationRequested: Whether the cancellation of this job has been
      requested.
    jobState: The detailed state of a job.
    predictionRequest: The prediction job request recorded.
    predictionResult: The current prediction job result.
    startTime: When the job processing was started.
    statusMetricsSnapshot: Progress report. A set of key-value pairs that
      convey the current state of the job.
    statusMetricsSnapshotTime: The time at which the 'status' field was
      populated.
    trainingRequest: The training job request recorded.
    trainingResult: The current training job result.
  """

  class JobStateValueValuesEnum(_messages.Enum):
    """The detailed state of a job.

    Values:
      UNKNOWN_JOB_STATE: <no description>
      QUEUED: <no description>
      PREPARING: <no description>
      RUNNING: <no description>
      SUCCEEDED: <no description>
      FAILED: <no description>
      CANCELLED: <no description>
    """
    UNKNOWN_JOB_STATE = 0
    QUEUED = 1
    PREPARING = 2
    RUNNING = 3
    SUCCEEDED = 4
    FAILED = 5
    CANCELLED = 6

  @encoding.MapUnrecognizedFields('additionalProperties')
  class StatusMetricsSnapshotValue(_messages.Message):
    """Progress report. A set of key-value pairs that convey the current state
    of the job.

    Messages:
      AdditionalProperty: An additional property for a
        StatusMetricsSnapshotValue object.

    Fields:
      additionalProperties: Additional properties of type
        StatusMetricsSnapshotValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a StatusMetricsSnapshotValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  createTime = _messages.StringField(1)
  createVersionRequest = _messages.MessageField('GoogleCloudMlV1alpha3CreateVersionRequest', 2)
  endTime = _messages.StringField(3)
  isCancellationRequested = _messages.BooleanField(4)
  jobState = _messages.EnumField('JobStateValueValuesEnum', 5)
  predictionRequest = _messages.MessageField('GoogleCloudMlV1alpha3SubmitPredictionJobRequest', 6)
  predictionResult = _messages.MessageField('GoogleCloudMlV1alpha3PredictionJobResult', 7)
  startTime = _messages.StringField(8)
  statusMetricsSnapshot = _messages.MessageField('StatusMetricsSnapshotValue', 9)
  statusMetricsSnapshotTime = _messages.StringField(10)
  trainingRequest = _messages.MessageField('GoogleCloudMlV1alpha3SubmitTrainingJobRequest', 11)
  trainingResult = _messages.MessageField('GoogleCloudMlV1alpha3TrainingJobResult', 12)


class GoogleCloudMlV1alpha3MasterSpec(_messages.Message):
  """Represents a specification of master worker.

  Fields:
    replicaCount: The required number of master worker servers. Defaults to 1.
      If the number of replicas is greater than 1, the first master worker
      will be the one monitored for success/failure.
    resources: Resource requirements for a master. If not specified, default
      master configuration will be used.
  """

  replicaCount = _messages.IntegerField(1, variant=_messages.Variant.UINT64)
  resources = _messages.MessageField('GoogleCloudMlV1alpha3ResourceSpec', 2)


class GoogleCloudMlV1alpha3ParameterConfig(_messages.Message):
  """Represents a single hyperparameter to optimize.

  Enums:
    ScaleTypeValueValuesEnum: How the parameter should be scaled to the
      hypercube. Leave unset for categorical Parameters. We strongly suggest
      using some kind of scaling for real or integral parameters (e.g.,
      UNIT_LINEAR_SCALE).
    TypeValueValuesEnum: The type of the parameter.

  Fields:
    categories: The list of possible categories. REQUIRED if
      type==CATEGORICAL.
    feasiblePoints: A list of feasible points, to be provided if and only if
      type==DISCRETE. The list should be in strictly increasing order. For
      instance, this Parameter might have possible settings of 1.5, 2.5, and
      4.0. This list shouldn't be too large - probably not more than 1,000
      points.
    maxValue: max_value is REQUIRED if type==DOUBLE or type==INTEGER. This
      field should be unset if type==CATEGORICAL. This value should be
      integers if type==INTEGER.
    minValue: min_value is REQUIRED if type==DOUBLE or type==INTEGER. This
      field should be unset if type==CATEGORICAL. This value should be
      integers if type==INTEGER.
    name: The parameter name must be unique amongst all ParameterConfigs in a
      HyperparameterConfig. E.g., "learning_rate".
    scaleType: How the parameter should be scaled to the hypercube. Leave
      unset for categorical Parameters. We strongly suggest using some kind of
      scaling for real or integral parameters (e.g., UNIT_LINEAR_SCALE).
    type: The type of the parameter.
  """

  class ScaleTypeValueValuesEnum(_messages.Enum):
    """How the parameter should be scaled to the hypercube. Leave unset for
    categorical Parameters. We strongly suggest using some kind of scaling for
    real or integral parameters (e.g., UNIT_LINEAR_SCALE).

    Values:
      NONE: By default, no scaling is applied.
      UNIT_LINEAR_SCALE: Scales the feasible space to (0, 1) linearly.
      UNIT_LOG_SCALE: Scales the feasible space logarithmically to (0, 1). The
        entire feasible space must be strictly positive.
      UNIT_REVERSE_LOG_SCALE: Scales the feasible space "reverse"
        logarithmically to (0, 1). The result is that values close to the top
        of the feasible space are spread out more than points near the bottom.
        The entire feasible space must be strictly positive.
    """
    NONE = 0
    UNIT_LINEAR_SCALE = 1
    UNIT_LOG_SCALE = 2
    UNIT_REVERSE_LOG_SCALE = 3

  class TypeValueValuesEnum(_messages.Enum):
    """The type of the parameter.

    Values:
      PARAMETER_TYPE_UNSPECIFIED: Parameter type must be specified.
        Unspecified values will be treated as an error.
      DOUBLE: Type for real-valued parameters.
      INTEGER: Type for integral parameters.
      CATEGORICAL: The parameter is categorical, with a value chosen from the
        categories field.
      DISCRETE: The parameter is real valued, with a fixed set of feasible
        points. If type==DISCRETE, feasible_points must be provided, and
        {min_value, max_value} will be ignored.
    """
    PARAMETER_TYPE_UNSPECIFIED = 0
    DOUBLE = 1
    INTEGER = 2
    CATEGORICAL = 3
    DISCRETE = 4

  categories = _messages.StringField(1, repeated=True)
  feasiblePoints = _messages.FloatField(2, repeated=True)
  maxValue = _messages.FloatField(3)
  minValue = _messages.FloatField(4)
  name = _messages.StringField(5)
  scaleType = _messages.EnumField('ScaleTypeValueValuesEnum', 6)
  type = _messages.EnumField('TypeValueValuesEnum', 7)


class GoogleCloudMlV1alpha3ParameterServerSpec(_messages.Message):
  """Represents a specification of parameter servers.

  Fields:
    replicaCount: The required number of parameter servers. Defaults to 1.
    resources: Resource requirements for a single parameter server. If not
      specified, default parameter server configuration will be used.
  """

  replicaCount = _messages.IntegerField(1, variant=_messages.Variant.UINT64)
  resources = _messages.MessageField('GoogleCloudMlV1alpha3ResourceSpec', 2)


class GoogleCloudMlV1alpha3PredictionJobResult(_messages.Message):
  """Represents the result of the longrunning.Operation created by the
  SubmitPredictionJob method.

  Fields:
    instancesProcessed: The number of data instances processed
    outputUri: The URI of the output dir provided at job creation time.
  """

  instancesProcessed = _messages.IntegerField(1, variant=_messages.Variant.UINT64)
  outputUri = _messages.StringField(2)


class GoogleCloudMlV1alpha3ResourceSpec(_messages.Message):
  """Resource specification for a program running inside a VM.

  Fields:
    cpus: The number of CPUs.
    disk: The required disk size (in bytes).
    gpus: The number of GPUs. Only allowed to be set within WorkerSpec.
    ram: The required RAM size (in bytes).
  """

  cpus = _messages.IntegerField(1, variant=_messages.Variant.UINT64)
  disk = _messages.IntegerField(2, variant=_messages.Variant.UINT64)
  gpus = _messages.IntegerField(3, variant=_messages.Variant.UINT64)
  ram = _messages.IntegerField(4, variant=_messages.Variant.UINT64)


class GoogleCloudMlV1alpha3SubmitPredictionJobRequest(_messages.Message):
  """Request to submit a batch prediction job against a trained model.

  Fields:
    inputUris: URIs of the TFRecord input data files. May contain file-system
      appropriate wildcards (Google Cloud Storage prefixes, for example.).
    jobName: The job name. Must be unique within the project.
    outputUri: The uri to which output is written, a Google Cloud Storage
      prefix for example.
    parent: The name of the model against which prediction should be
      performed. It is of the form:
      /projects/project_id/models/model_name/versions/version_id. The version
      information may be omitted, in which case prediction is performed
      against the default version.
    zone: Optional. The Google Compute Engine zone to run the training job in.
      If not specified, the system will pick a zone based on the job
      requirements. It is the user's responsibility to procure quota in this
      zone.
  """

  inputUris = _messages.StringField(1, repeated=True)
  jobName = _messages.StringField(2)
  outputUri = _messages.StringField(3)
  parent = _messages.StringField(4)
  zone = _messages.StringField(5)


class GoogleCloudMlV1alpha3SubmitTrainingJobRequest(_messages.Message):
  """Request message for the SubmitTrainingJob method.

  Enums:
    LogLevelValueValuesEnum: Specify minimun log levels.
    TensorflowVersionValueValuesEnum: The version of TensorFlow to use. If
      unset, defaults to LATEST.

  Fields:
    evalDataPaths: The URIs of the data used for evaluation.
    hyperparameters: Optional set of Hyperparameters to tune.
    jobArgs: Additional command line arguments to pass to the program.
    jobName: The job name. Must be unique within the project.
    logLevel: Specify minimun log levels.
    masterSpec: Specification of master workers. The first master worker will
      be the task monitored for job success/failure.
    metadataPath: Optional. The URI of the file containing metadata.
    moduleName: The python module name to run after installing the trainer_uri
      packages. The worker will be given a flag telling the type of the
      process: worker, parameter server or evaluator. Required if docker_image
      is not set.
    outputPath: The URI of the Google Cloud Storage location to which output
      should be written. This URI may have additional subdirectories appended
      to it, e.g., during hyperparameter tuning, and the possibly modified URI
      is passed to the binary as the --output_path flag. Training binaries
      should generally respect this parameter for their output and are
      required to do so when launching from Google Cloud Dataflow or when
      using hyperparameter tuning.
    parent: The project name.
    psSpec: Specification of parameter servers.
    tensorflowVersion: The version of TensorFlow to use. If unset, defaults to
      LATEST.
    trainDataPaths: The URIs of the training data.
    trainerUri: Tarball Python Packages from Google Cloud Storage with the
      training program and any additional dependencies. At least one is
      required if docker_image is not set.
    workerSpec: Specification of workers.
    zone: Optional. The Google Compute Engine zone to run the training job in.
      If not specified, the system will pick a zone based on the job
      requirements. It is the user's responsibility to procure quota in this
      zone.
  """

  class LogLevelValueValuesEnum(_messages.Enum):
    """Specify minimun log levels.

    Values:
      UNKNOWN: No log level specified.
      DEBUG: Debug logs and above will be saved.
      INFO: Info logs and above will be saved.
      WARNING: Warning logs and above will be saved.
      ERROR: Error logs and above will be saved.
      CRITICAL: Only critical logs will be saved.
    """
    UNKNOWN = 0
    DEBUG = 1
    INFO = 2
    WARNING = 3
    ERROR = 4
    CRITICAL = 5

  class TensorflowVersionValueValuesEnum(_messages.Enum):
    """The version of TensorFlow to use. If unset, defaults to LATEST.

    Values:
      LATEST: Equivalent to the latest supported version, i.e., the last
        version in this list of enums.
      V_0_9_1: Tensorflow version 0.9.1
    """
    LATEST = 0
    V_0_9_1 = 1

  evalDataPaths = _messages.StringField(1, repeated=True)
  hyperparameters = _messages.MessageField('GoogleCloudMlV1alpha3HyperparameterSpec', 2)
  jobArgs = _messages.StringField(3, repeated=True)
  jobName = _messages.StringField(4)
  logLevel = _messages.EnumField('LogLevelValueValuesEnum', 5)
  masterSpec = _messages.MessageField('GoogleCloudMlV1alpha3MasterSpec', 6)
  metadataPath = _messages.StringField(7)
  moduleName = _messages.StringField(8)
  outputPath = _messages.StringField(9)
  parent = _messages.StringField(10)
  psSpec = _messages.MessageField('GoogleCloudMlV1alpha3ParameterServerSpec', 11)
  tensorflowVersion = _messages.EnumField('TensorflowVersionValueValuesEnum', 12)
  trainDataPaths = _messages.StringField(13, repeated=True)
  trainerUri = _messages.StringField(14, repeated=True)
  workerSpec = _messages.MessageField('GoogleCloudMlV1alpha3WorkerSpec', 15)
  zone = _messages.StringField(16)


class GoogleCloudMlV1alpha3TrainingJobResult(_messages.Message):
  """Represents the result of the longrunning.Operation created by the
  SubmitTrainingJob method.

  Fields:
    outputPath: The URI of the output location provided at job creation time.
    runs: Results for individual Hyperparameter runs.
    runsCompleted: The number of tuning runs completed successfully.
    stepsCompleted: The accomplished number of steps.
  """

  outputPath = _messages.StringField(1)
  runs = _messages.MessageField('GoogleCloudMlV1alpha3HyperparameterJobResult', 2, repeated=True)
  runsCompleted = _messages.IntegerField(3, variant=_messages.Variant.UINT64)
  stepsCompleted = _messages.IntegerField(4, variant=_messages.Variant.UINT64)


class GoogleCloudMlV1alpha3Version(_messages.Message):
  """Represents a version of the model.

  Fields:
    createTime: The creation time of the version.
    isDefault: Whether the version is default within the model.
    lastUseTime: The last usage time of the version.
    name: The user-specified name of the model version.
    originUri: Google Cloud Storage location containing the model graph,
      weights and additional metadata at the moment when the version is
      created.
  """

  createTime = _messages.StringField(1)
  isDefault = _messages.BooleanField(2)
  lastUseTime = _messages.StringField(3)
  name = _messages.StringField(4)
  originUri = _messages.StringField(5)


class GoogleCloudMlV1alpha3WorkerSpec(_messages.Message):
  """Represents a specification of training workers.

  Fields:
    replicaCount: The required number of workers. Defaults to 1.
    resources: Resource requirements for a single worker. Optional. If not
      specified, default worker configuration will be used.
  """

  replicaCount = _messages.IntegerField(1, variant=_messages.Variant.UINT64)
  resources = _messages.MessageField('GoogleCloudMlV1alpha3ResourceSpec', 2)


class GoogleCloudMlV1beta1CancelJobRequest(_messages.Message):
  """Request message for the CancelJob method."""


class GoogleCloudMlV1beta1GetConfigResponse(_messages.Message):
  """Returns service configuration associated with a given project.

  Fields:
    serviceAccount: The service account Cloud ML uses to access resources in
      the project.
    serviceAccountProject: Project number associated with 'service_account'.
  """

  serviceAccount = _messages.StringField(1)
  serviceAccountProject = _messages.IntegerField(2)


class GoogleCloudMlV1beta1HyperparameterOutput(_messages.Message):
  """Represents the result of a hyperparameter tuning trial from a training
  job.

  Messages:
    HyperparametersValue: The hyperparameters given to this trial.

  Fields:
    allMetrics: All recorded object metrics for this trial.
    finalMetric: The final objective metric seen for this trial.
    hyperparameters: The hyperparameters given to this trial.
    trialId: The trial id for these results.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class HyperparametersValue(_messages.Message):
    """The hyperparameters given to this trial.

    Messages:
      AdditionalProperty: An additional property for a HyperparametersValue
        object.

    Fields:
      additionalProperties: Additional properties of type HyperparametersValue
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a HyperparametersValue object.

      Fields:
        key: Name of the additional property.
        value: A string attribute.
      """

      key = _messages.StringField(1)
      value = _messages.StringField(2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  allMetrics = _messages.MessageField('GoogleCloudMlV1beta1HyperparameterOutputHyperparameterMetric', 1, repeated=True)
  finalMetric = _messages.MessageField('GoogleCloudMlV1beta1HyperparameterOutputHyperparameterMetric', 2)
  hyperparameters = _messages.MessageField('HyperparametersValue', 3)
  trialId = _messages.StringField(4)


class GoogleCloudMlV1beta1HyperparameterOutputHyperparameterMetric(_messages.Message):
  """An observed value of a metric.

  Fields:
    objectiveValue: The objective value at this training step.
    trainingStep: The global training step for this metric.
  """

  objectiveValue = _messages.FloatField(1)
  trainingStep = _messages.IntegerField(2)


class GoogleCloudMlV1beta1HyperparameterSpec(_messages.Message):
  """Represents a set of hyperparameters to optimize.

  Enums:
    GoalValueValuesEnum: Required. Should the evaluation metric be maximized
      or minimized?

  Fields:
    goal: Required. Should the evaluation metric be maximized or minimized?
    maxParallelTrials: Optional. How many training trials should be run in
      parallel. More parallelization will be faster, but parallel trials only
      benefit from the information gained by previous trials. Each trial will
      use the same scale tier and machine types. Defaults to one.
    maxTrials: Optional. How many training trials should be attempted to
      optimize. Defaults to one.
    params: Required. The set of parameters to tune.
  """

  class GoalValueValuesEnum(_messages.Enum):
    """Required. Should the evaluation metric be maximized or minimized?

    Values:
      GOAL_TYPE_UNSPECIFIED: Goal Type will default to maximize.
      MAXIMIZE: Maximize the goal metric.
      MINIMIZE: Minimize the goal metric.
    """
    GOAL_TYPE_UNSPECIFIED = 0
    MAXIMIZE = 1
    MINIMIZE = 2

  goal = _messages.EnumField('GoalValueValuesEnum', 1)
  maxParallelTrials = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  maxTrials = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  params = _messages.MessageField('GoogleCloudMlV1beta1ParameterSpec', 4, repeated=True)


class GoogleCloudMlV1beta1Job(_messages.Message):
  """Represents a training or prediction job.

  Enums:
    StateValueValuesEnum: Output only. The detailed state of a job.

  Fields:
    createTime: Output only. When the job was created.
    endTime: Output only. When the job processing was completed.
    errorMessage: Output only. The details of a failure or a cancellation.
    jobId: Required. The user-specified id of the job.
    predictionInput: Input parameters to create a prediction job.
    predictionOutput: The current prediction job result.
    startTime: Output only. When the job processing was started.
    state: Output only. The detailed state of a job.
    trainingInput: Input parameters to create a training job.
    trainingOutput: The current training job result.
  """

  class StateValueValuesEnum(_messages.Enum):
    """Output only. The detailed state of a job.

    Values:
      STATE_UNSPECIFIED: The job state is unspecified.
      QUEUED: The job has been just created and is awaiting to be processed.
      PREPARING: The job is being prepared to run.
      RUNNING: Training or prediction is in progress.
      SUCCEEDED: The job completed successfully.
      FAILED: The job failed. `error_message` should contain the details of
        the failure.
      CANCELLING: The job is being cancelled. `error_message` should describe
        the reason for the cancellation.
      CANCELLED: The job has been cancelled. `error_message` should describe
        the reason for the cancellation.
    """
    STATE_UNSPECIFIED = 0
    QUEUED = 1
    PREPARING = 2
    RUNNING = 3
    SUCCEEDED = 4
    FAILED = 5
    CANCELLING = 6
    CANCELLED = 7

  createTime = _messages.StringField(1)
  endTime = _messages.StringField(2)
  errorMessage = _messages.StringField(3)
  jobId = _messages.StringField(4)
  predictionInput = _messages.MessageField('GoogleCloudMlV1beta1PredictionInput', 5)
  predictionOutput = _messages.MessageField('GoogleCloudMlV1beta1PredictionOutput', 6)
  startTime = _messages.StringField(7)
  state = _messages.EnumField('StateValueValuesEnum', 8)
  trainingInput = _messages.MessageField('GoogleCloudMlV1beta1TrainingInput', 9)
  trainingOutput = _messages.MessageField('GoogleCloudMlV1beta1TrainingOutput', 10)


class GoogleCloudMlV1beta1ListJobsResponse(_messages.Message):
  """Response message for the ListJobs method.

  Fields:
    jobs: The list of jobs.
    nextPageToken: Optional pagination token to use for retrieving the next
      page of results.
  """

  jobs = _messages.MessageField('GoogleCloudMlV1beta1Job', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class GoogleCloudMlV1beta1ListModelsResponse(_messages.Message):
  """Response message for the ListModels method.

  Fields:
    models: The list of models.
    nextPageToken: Optional pagination token to use for retrieving the next
      page of results.
  """

  models = _messages.MessageField('GoogleCloudMlV1beta1Model', 1, repeated=True)
  nextPageToken = _messages.StringField(2)


class GoogleCloudMlV1beta1ListVersionsResponse(_messages.Message):
  """Response message for the ListVersions method.

  Fields:
    nextPageToken: Optional pagination token to use for retrieving the next
      page of results.
    versions: The list of versions.
  """

  nextPageToken = _messages.StringField(1)
  versions = _messages.MessageField('GoogleCloudMlV1beta1Version', 2, repeated=True)


class GoogleCloudMlV1beta1Model(_messages.Message):
  """Represents a machine learning model resource that can be used to perform
  prediction.

  Fields:
    defaultVersion: Output only. The default version of the model.
    description: Optional. The description of the model.
    name: Required. The user-specified name of the model.
  """

  defaultVersion = _messages.MessageField('GoogleCloudMlV1beta1Version', 1)
  description = _messages.StringField(2)
  name = _messages.StringField(3)


class GoogleCloudMlV1beta1OperationMetadata(_messages.Message):
  """Represents the metadata of the longrunning.Operation.

  Fields:
    createTime: When the operation was submitted.
    endTime: When the operation processing was completed.
    isCancellationRequested: Whether the cancellation of this operation has
      been requested.
    startTime: When the operation processing was started.
  """

  createTime = _messages.StringField(1)
  endTime = _messages.StringField(2)
  isCancellationRequested = _messages.BooleanField(3)
  startTime = _messages.StringField(4)


class GoogleCloudMlV1beta1ParameterSpec(_messages.Message):
  """Represents a single hyperparameter to optimize.

  Enums:
    ScaleTypeValueValuesEnum: Optional. How the parameter should be scaled to
      the hypercube. Leave unset for categorical parameters. Some kind of
      scaling is strongly recommended for real or integral parameters (e.g.,
      `UNIT_LINEAR_SCALE`).
    TypeValueValuesEnum: Required. The type of the parameter.

  Fields:
    categoricalValues: Required if type is `CATEGORICAL`. The list of possible
      categories.
    discreteValues: Required if type is `DISCRETE`. A list of feasible points.
      The list should be in strictly increasing order. For instance, this
      parameter might have possible settings of 1.5, 2.5, and 4.0. This list
      shouldn't be too large - probably not more than 1,000 points.
    maxValue: Required if typeis `DOUBLE` or `INTEGER`. This field should be
      unset if type is `CATEGORICAL`. This value should be integers if type is
      `INTEGER`.
    minValue: Required if type is `DOUBLE` or `INTEGER`. This field should be
      unset if type is `CATEGORICAL`. This value should be integers if type is
      INTEGER.
    parameterName: Required. The parameter name must be unique amongst all
      ParameterConfigs in a HyperparameterSpec message. E.g., "learning_rate".
    scaleType: Optional. How the parameter should be scaled to the hypercube.
      Leave unset for categorical parameters. Some kind of scaling is strongly
      recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).
    type: Required. The type of the parameter.
  """

  class ScaleTypeValueValuesEnum(_messages.Enum):
    """Optional. How the parameter should be scaled to the hypercube. Leave
    unset for categorical parameters. Some kind of scaling is strongly
    recommended for real or integral parameters (e.g., `UNIT_LINEAR_SCALE`).

    Values:
      NONE: By default, no scaling is applied.
      UNIT_LINEAR_SCALE: Scales the feasible space to (0, 1) linearly.
      UNIT_LOG_SCALE: Scales the feasible space logarithmically to (0, 1). The
        entire feasible space must be strictly positive.
      UNIT_REVERSE_LOG_SCALE: Scales the feasible space "reverse"
        logarithmically to (0, 1). The result is that values close to the top
        of the feasible space are spread out more than points near the bottom.
        The entire feasible space must be strictly positive.
    """
    NONE = 0
    UNIT_LINEAR_SCALE = 1
    UNIT_LOG_SCALE = 2
    UNIT_REVERSE_LOG_SCALE = 3

  class TypeValueValuesEnum(_messages.Enum):
    """Required. The type of the parameter.

    Values:
      PARAMETER_TYPE_UNSPECIFIED: Parameter type must be specified.
        Unspecified values will be treated as an error.
      DOUBLE: Type for real-valued parameters.
      INTEGER: Type for integral parameters.
      CATEGORICAL: The parameter is categorical, with a value chosen from the
        categories field.
      DISCRETE: The parameter is real valued, with a fixed set of feasible
        points. If `type==DISCRETE`, feasible_points must be provided, and
        {`min_value`, `max_value`} will be ignored.
    """
    PARAMETER_TYPE_UNSPECIFIED = 0
    DOUBLE = 1
    INTEGER = 2
    CATEGORICAL = 3
    DISCRETE = 4

  categoricalValues = _messages.StringField(1, repeated=True)
  discreteValues = _messages.FloatField(2, repeated=True)
  maxValue = _messages.FloatField(3)
  minValue = _messages.FloatField(4)
  parameterName = _messages.StringField(5)
  scaleType = _messages.EnumField('ScaleTypeValueValuesEnum', 6)
  type = _messages.EnumField('TypeValueValuesEnum', 7)


class GoogleCloudMlV1beta1PredictRequest(_messages.Message):
  """Request for predictions to be issued against a trained model.  The body
  of the request consists of a single JSON object with a single top-level
  field:   * `instances`: a list of JSON values representing the instances to
  use for  prediction.  The structure of each element of the instances list is
  the type of data your model expects to work on. There are two types of
  instances: those that include named inputs and those that do not.  Most data
  does not include named inputs. In this case, each instance will be a JSON
  boolean, number, string, or (possibly deeply nested) list of any of the
  above. For instance, if your model accepts rows of CSV data, then each
  element is a string; if each data instance is a vector of ints or floats,
  use a JSON list of numbers, etc. More examples are as follows:  <pre> # CSV
  data  {"instances": ["1.0,true,\\"x\\"", "-2.0,false,\\"y\\""]}  # Text
  {"instances": ["the quick brown fox", "la bruja le dio"]}  # Sentences, each
  a list of words (vectors of strings).  {"instances":
  [["the","quick","brown"], ["la","bruja","le"]]}  # Three instances, each a
  floating point scalar, e.g., to compute f(x).  {"instances": [0.0, 1.1,
  2.2]}  # 3 instances (integer scalars)  # Two instances, each a 3 element
  vecor of ints.  {"instances": [[0,1,2], [3,4,5],...]}  # A single instance,
  which is 2x3 matrix of ints.  {"instances": [[[0,1,2], [3,4,5]], ...]}  # A
  single image represented as a 3-dimensional list with dimesions:  # height,
  width, and channels (3).  {"instances": [[[[0,1,2], [3,4,5], \u2026]]]]} </pre>
  Importantly, if your data is not UTF-8 (the only currently supported
  character set), you will need to base64 encode the data and mark it as
  binary. The latter is accomplished by using a JSON object of the form:
  <pre>{"b": "..."} </pre> in place of any JSON string that is base64 encoded.
  For example:  <pre> # Two Serialized tf.Examples (fake data, for
  illustrative purposes only)  {"instances": [{"b": "X5ad6u"}, {"b":
  "IA9j4nx"}]}  # Two JPEG image byte strings (fake data, for illustrative
  purposes only)  {"instances": [{"b": "ASa8asdf"}, {"b": "JLK7ljk3"}]} </pre>
  In the case that your data includes named references, you will send a JSON
  object with the named references as the keys. For instance, if you used
  Cloud ML's preprocessing library and used the JSON key-value pair data
  format, you would send instances as follows:  <pre> # JSON input data to be
  preprocessed.  {"instances": [{"a": 1.0,  "b": true,  "c": "x"},
  {"a": -2.0, "b": false, "c": "y"}]} </pre>  Another use case is if your
  underlying TensorFlow graph contains multiple input tensors, then the keys
  would be the aliases to the input tensors, e.g.,  <pre> # Graph with input
  tensor aliases "tag" (string) and "image" (base64  # encoded string).
  {"instances": [{"tag": "beach", "image": {"b": "ASa8asdf"}},
  {"tag": "car", "image": {"b": "JLK7ljk3"}}]}  # Graph with input tensor
  aliases "tag" (string) and "image"  # (3-dimensional array of 8-bit ints).
  {"instances": [{"tag": "beach", "image": [[[263,1,10], [262,2,11], ...]]},
  {"tag": "car", "image": [[[10,11,24], [23,10,15], ...]]}]} </pre>  There is
  a one-to-one correspondence between the predictions and the instances in the
  request. Each individual prediction takes the same form as an instance in
  the request, namely JSON strings, numbers, booleans, or lists thereof. If
  your model has more than one output tensor, each prediction will be a JSON
  object with the keys being the output aliases in the graph.  Examples:
  <pre> # Predictions for three input instances, predictions are an integer
  label,  # e.g., a digit in digit recognition  {"predictions": [5, 4, 3]}  #
  Predictions for two input instances in a two-class classification  #
  problem. The labels are strings and scores are the probability of "car"  #
  and "beach".  {"predictions": [{"label": "beach", "scores": [0.1, 0.9]},
  {"label": "car", "scores": [0.75, 0.25]}]} </pre>

  Fields:
    httpBody:  Required. The prediction request body.
  """

  httpBody = _messages.MessageField('GoogleApiHttpBody', 1)


class GoogleCloudMlV1beta1PredictResponse(_messages.Message):
  """Response with predictions produced by a trained model.

  Fields:
    httpBody: The prediction response body.  Responses are very similar to
      requests. There are two top-level fields, each of which are JSON lists:
      * `predictions`: The list of predictions for each of the inputs in the
      request.  * `error`: An error message if any instance produced an error.
      There is a one-to-one correspondence between the predictions and the
      instances in the request. Each individual prediction takes the same form
      as an instance in the request, namely JSON strings, numbers, booleans,
      or lists thereof. If your model has more than one output tensor, each
      prediction will be a JSON object with the keys being the output aliases
      in the graph.  If there is an error processing any single instance, no
      predictions are returned and the `error` field is populated with the
      error message.  Examples:  <pre> # Predictions for three input
      instances, predictions are an integer label,  # e.g., a digit in digit
      recognition  {"predictions": [5, 4, 3]}  # Predictions for two input
      instances in a two-class classification  # problem. The labels are
      strings and scores are the probability of  # "car" and "beach".
      {"predictions": [{"label": "beach", "scores": [0.1, 0.9]},
      {"label": "car", "scores": [0.75, 0.25]}]}  # An error:   {"error":
      "Divide by zero"} </pre>  Required. The body of the response.
  """

  httpBody = _messages.MessageField('GoogleApiHttpBody', 1)


class GoogleCloudMlV1beta1PredictionInput(_messages.Message):
  """Represents input parameters for a prediction job.

  Enums:
    DataFormatValueValuesEnum: Required. The format of the input data files.

  Fields:
    dataFormat: Required. The format of the input data files.
    inputPaths: Required. The GCS location of the input data files. May
      contain wildcards.
    modelName: The name of the model. The default version will be used.
    outputPath: Required. The output GCS location.
    region: Required. The Google Compute Engine region to run the prediction
      job in.
    versionName: The version to be used.
  """

  class DataFormatValueValuesEnum(_messages.Enum):
    """Required. The format of the input data files.

    Values:
      DATA_FORMAT_UNSPECIFIED: Unspecified format.
      TEXT: The source file is a text file with instances separated by the
        new-line character.
      TF_RECORD: The source file is a TFRecord file.
    """
    DATA_FORMAT_UNSPECIFIED = 0
    TEXT = 1
    TF_RECORD = 2

  dataFormat = _messages.EnumField('DataFormatValueValuesEnum', 1)
  inputPaths = _messages.StringField(2, repeated=True)
  modelName = _messages.StringField(3)
  outputPath = _messages.StringField(4)
  region = _messages.StringField(5)
  versionName = _messages.StringField(6)


class GoogleCloudMlV1beta1PredictionOutput(_messages.Message):
  """Represents results of a prediction job.

  Fields:
    errorCount: The number of data instances which resulted in errors.
    outputPath: The output GCS location provided at the job creation time.
    predictionCount: The number of generated predictions.
  """

  errorCount = _messages.IntegerField(1)
  outputPath = _messages.StringField(2)
  predictionCount = _messages.IntegerField(3)


class GoogleCloudMlV1beta1SetDefaultVersionRequest(_messages.Message):
  """Request message for the SetDefaultVersion request."""


class GoogleCloudMlV1beta1TrainingInput(_messages.Message):
  """Represents input parameters for a training job.

  Enums:
    ScaleTierValueValuesEnum: Required. Specifies the machine types, the
      amounts of replicas for workers and parameter servers.

  Fields:
    args: Optional. Command line arguments to pass to the program.
    hyperparameters: Optional. The set of Hyperparameters to tune.
    masterType: Optional. Specifies the master machine type. The following
      types are supported:  - `standard` - `large_model` - `complex_model` -
      `accelerated_s` - `accelerated_m`  Cannot be used in combination with a
      standard scale tier.
    packageUris: Required. The Google Cloud Storage location of the packages
      with the training program and any additional dependencies.
    parameterServerCount: Optional. Specifies the required amount of parameter
      server replicas. Cannot be used in combination with a standard scale
      tier.
    parameterServerType: Optional. Specifies the parameter server machine
      type. The following types are supported:  - `standard` - `large_model` -
      `complex_model`  Cannot be used in combination with a standard scale
      tier.
    pythonModule: Required. The Python module name to run after installing the
      packages.
    region: Required. The Google Compute Engine region to run the training job
      in.
    scaleTier: Required. Specifies the machine types, the amounts of replicas
      for workers and parameter servers.
    tensorflowVersion: Optional. The version of TensorFlow to use. For
      example, "0.10.1" or "latest".
    workerCount: Optional. Specifies the required amount of worker replicas.
      Cannot be used in combination with a standard scale tier.
    workerType: Optional. Specifies the worker machine type. The following
      types are supported:  - `standard` - `large_model` - `complex_model` -
      `accelerated_s` - `accelerated_m`  Cannot be used in combination with a
      standard scale tier.
  """

  class ScaleTierValueValuesEnum(_messages.Enum):
    """Required. Specifies the machine types, the amounts of replicas for
    workers and parameter servers.

    Values:
      BASIC: A single worker instance and no parameter servers.
      STANDARD_1: A few workers and one parameter server.
      STANDARD_2: A medium amount of workers and a few parameter servers.
      PREMIUM_1: A large amount of worker with more parameter servers.
      PREMIUM_2: A very large amount of workers with even more parameter
        servers.
      CUSTOM: Specify your own amounts of replicas in the `worker_count` and
        `parameter_server_count` fields, as well as machine types for the
        master, the workers and the parameter servers.
    """
    BASIC = 0
    STANDARD_1 = 1
    STANDARD_2 = 2
    PREMIUM_1 = 3
    PREMIUM_2 = 4
    CUSTOM = 5

  args = _messages.StringField(1, repeated=True)
  hyperparameters = _messages.MessageField('GoogleCloudMlV1beta1HyperparameterSpec', 2)
  masterType = _messages.StringField(3)
  packageUris = _messages.StringField(4, repeated=True)
  parameterServerCount = _messages.IntegerField(5)
  parameterServerType = _messages.StringField(6)
  pythonModule = _messages.StringField(7)
  region = _messages.StringField(8)
  scaleTier = _messages.EnumField('ScaleTierValueValuesEnum', 9)
  tensorflowVersion = _messages.StringField(10)
  workerCount = _messages.IntegerField(11)
  workerType = _messages.StringField(12)


class GoogleCloudMlV1beta1TrainingOutput(_messages.Message):
  """Represents results of a training job.

  Fields:
    completedTrialCount: The number of tuning trials completed successfully.
    trials: Results for individual Hyperparameter trials.
  """

  completedTrialCount = _messages.IntegerField(1)
  trials = _messages.MessageField('GoogleCloudMlV1beta1HyperparameterOutput', 2, repeated=True)


class GoogleCloudMlV1beta1Version(_messages.Message):
  """Represents a version of the model.

  Fields:
    createTime: Output only. The creation time of the version.
    deploymentUri: Required. Google Cloud Storage object containing the model
      graph, weights and additional metadata at the moment when the version is
      created.
    description: Optional. The description of the model version.
    isDefault: Output only. Whether the version is default within the model.
    lastUseTime: Output only. The last usage time of the version.
    name: Required.The user-specified name of the model version.
  """

  createTime = _messages.StringField(1)
  deploymentUri = _messages.StringField(2)
  description = _messages.StringField(3)
  isDefault = _messages.BooleanField(4)
  lastUseTime = _messages.StringField(5)
  name = _messages.StringField(6)


class GoogleLongrunningListOperationsResponse(_messages.Message):
  """The response message for Operations.ListOperations.

  Fields:
    nextPageToken: The standard List next-page token.
    operations: A list of operations that matches the specified filter in the
      request.
  """

  nextPageToken = _messages.StringField(1)
  operations = _messages.MessageField('GoogleLongrunningOperation', 2, repeated=True)


class GoogleLongrunningOperation(_messages.Message):
  """This resource represents a long-running operation that is the result of a
  network API call.

  Messages:
    MetadataValue: Service-specific metadata associated with the operation.
      It typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    ResponseValue: The normal response of the operation in case of success.
      If the original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

  Fields:
    done: If the value is `false`, it means the operation is still in
      progress. If true, the operation is completed, and either `error` or
      `response` is available.
    error: The error result of the operation in case of failure.
    metadata: Service-specific metadata associated with the operation.  It
      typically contains progress information and common metadata such as
      create time. Some services might not provide such metadata.  Any method
      that returns a long-running operation should document the metadata type,
      if any.
    name: The server-assigned name, which is only unique within the same
      service that originally returns it. If you use the default HTTP mapping,
      the `name` should have the format of `operations/some/unique/name`.
    response: The normal response of the operation in case of success.  If the
      original method returns no data on success, such as `Delete`, the
      response is `google.protobuf.Empty`.  If the original method is standard
      `Get`/`Create`/`Update`, the response should be the resource.  For other
      methods, the response should have the type `XxxResponse`, where `Xxx` is
      the original method name.  For example, if the original method name is
      `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class MetadataValue(_messages.Message):
    """Service-specific metadata associated with the operation.  It typically
    contains progress information and common metadata such as create time.
    Some services might not provide such metadata.  Any method that returns a
    long-running operation should document the metadata type, if any.

    Messages:
      AdditionalProperty: An additional property for a MetadataValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a MetadataValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  @encoding.MapUnrecognizedFields('additionalProperties')
  class ResponseValue(_messages.Message):
    """The normal response of the operation in case of success.  If the
    original method returns no data on success, such as `Delete`, the response
    is `google.protobuf.Empty`.  If the original method is standard
    `Get`/`Create`/`Update`, the response should be the resource.  For other
    methods, the response should have the type `XxxResponse`, where `Xxx` is
    the original method name.  For example, if the original method name is
    `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

    Messages:
      AdditionalProperty: An additional property for a ResponseValue object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a ResponseValue object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  done = _messages.BooleanField(1)
  error = _messages.MessageField('GoogleRpcStatus', 2)
  metadata = _messages.MessageField('MetadataValue', 3)
  name = _messages.StringField(4)
  response = _messages.MessageField('ResponseValue', 5)


class GoogleProtobufEmpty(_messages.Message):
  """A generic empty message that you can re-use to avoid defining duplicated
  empty messages in your APIs. A typical example is to use it as the request
  or the response type of an API method. For instance:      service Foo {
  rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);     }  The
  JSON representation for `Empty` is empty JSON object `{}`.
  """



class GoogleRpcStatus(_messages.Message):
  """The `Status` type defines a logical error model that is suitable for
  different programming environments, including REST APIs and RPC APIs. It is
  used by [gRPC](https://github.com/grpc). The error model is designed to be:
  - Simple to use and understand for most users - Flexible enough to meet
  unexpected needs  # Overview  The `Status` message contains three pieces of
  data: error code, error message, and error details. The error code should be
  an enum value of google.rpc.Code, but it may accept additional error codes
  if needed.  The error message should be a developer-facing English message
  that helps developers *understand* and *resolve* the error. If a localized
  user-facing error message is needed, put the localized message in the error
  details or localize it in the client. The optional error details may contain
  arbitrary information about the error. There is a predefined set of error
  detail types in the package `google.rpc` which can be used for common error
  conditions.  # Language mapping  The `Status` message is the logical
  representation of the error model, but it is not necessarily the actual wire
  format. When the `Status` message is exposed in different client libraries
  and different wire protocols, it can be mapped differently. For example, it
  will likely be mapped to some exceptions in Java, but more likely mapped to
  some error codes in C.  # Other uses  The error model and the `Status`
  message can be used in a variety of environments, either with or without
  APIs, to provide a consistent developer experience across different
  environments.  Example uses of this error model include:  - Partial errors.
  If a service needs to return partial errors to the client,     it may embed
  the `Status` in the normal response to indicate the partial     errors.  -
  Workflow errors. A typical workflow has multiple steps. Each step may
  have a `Status` message for error reporting purpose.  - Batch operations. If
  a client uses batch request and batch response, the     `Status` message
  should be used directly inside batch response, one for     each error sub-
  response.  - Asynchronous operations. If an API call embeds asynchronous
  operation     results in its response, the status of those operations should
  be     represented directly using the `Status` message.  - Logging. If some
  API errors are stored in logs, the message `Status` could     be used
  directly after any stripping needed for security/privacy reasons.

  Messages:
    DetailsValueListEntry: A DetailsValueListEntry object.

  Fields:
    code: The status code, which should be an enum value of google.rpc.Code.
    details: A list of messages that carry the error details.  There will be a
      common set of message types for APIs to use.
    message: A developer-facing error message, which should be in English. Any
      user-facing error message should be localized and sent in the
      google.rpc.Status.details field, or localized by the client.
  """

  @encoding.MapUnrecognizedFields('additionalProperties')
  class DetailsValueListEntry(_messages.Message):
    """A DetailsValueListEntry object.

    Messages:
      AdditionalProperty: An additional property for a DetailsValueListEntry
        object.

    Fields:
      additionalProperties: Properties of the object. Contains field @type
        with type URL.
    """

    class AdditionalProperty(_messages.Message):
      """An additional property for a DetailsValueListEntry object.

      Fields:
        key: Name of the additional property.
        value: A extra_types.JsonValue attribute.
      """

      key = _messages.StringField(1)
      value = _messages.MessageField('extra_types.JsonValue', 2)

    additionalProperties = _messages.MessageField('AdditionalProperty', 1, repeated=True)

  code = _messages.IntegerField(1, variant=_messages.Variant.INT32)
  details = _messages.MessageField('DetailsValueListEntry', 2, repeated=True)
  message = _messages.StringField(3)


class MlProjectsGetConfigRequest(_messages.Message):
  """A MlProjectsGetConfigRequest object.

  Fields:
    projectsId: Part of `name`. Required. The project name.
  """

  projectsId = _messages.StringField(1, required=True)


class MlProjectsJobsCancelRequest(_messages.Message):
  """A MlProjectsJobsCancelRequest object.

  Fields:
    googleCloudMlV1beta1CancelJobRequest: A
      GoogleCloudMlV1beta1CancelJobRequest resource to be passed as the
      request body.
    jobsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. Required. The name of the job.
  """

  googleCloudMlV1beta1CancelJobRequest = _messages.MessageField('GoogleCloudMlV1beta1CancelJobRequest', 1)
  jobsId = _messages.StringField(2, required=True)
  projectsId = _messages.StringField(3, required=True)


class MlProjectsJobsCreateRequest(_messages.Message):
  """A MlProjectsJobsCreateRequest object.

  Fields:
    googleCloudMlV1beta1Job: A GoogleCloudMlV1beta1Job resource to be passed
      as the request body.
    projectsId: Part of `parent`. Required. The project name.
  """

  googleCloudMlV1beta1Job = _messages.MessageField('GoogleCloudMlV1beta1Job', 1)
  projectsId = _messages.StringField(2, required=True)


class MlProjectsJobsGetRequest(_messages.Message):
  """A MlProjectsJobsGetRequest object.

  Fields:
    jobsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. Required. The name of the job.
  """

  jobsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)


class MlProjectsJobsListRequest(_messages.Message):
  """A MlProjectsJobsListRequest object.

  Fields:
    filter: Optional. Specifies the subset of jobs to retrieve.
    orderBy: Optional. Specifies the ordering of the jobs.
    pageSize: Optional. The page size.
    pageToken: Optional. A token for continuing the enumeration.
    projectsId: Part of `parent`. Required. The name of the project whose jobs
      are to be listed.
  """

  filter = _messages.StringField(1)
  orderBy = _messages.StringField(2)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)
  projectsId = _messages.StringField(5, required=True)


class MlProjectsModelsCreateRequest(_messages.Message):
  """A MlProjectsModelsCreateRequest object.

  Fields:
    googleCloudMlV1beta1Model: A GoogleCloudMlV1beta1Model resource to be
      passed as the request body.
    projectsId: Part of `parent`. Required. The project name.
  """

  googleCloudMlV1beta1Model = _messages.MessageField('GoogleCloudMlV1beta1Model', 1)
  projectsId = _messages.StringField(2, required=True)


class MlProjectsModelsDeleteRequest(_messages.Message):
  """A MlProjectsModelsDeleteRequest object.

  Fields:
    modelsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. Required. The name of the model.
  """

  modelsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)


class MlProjectsModelsGetRequest(_messages.Message):
  """A MlProjectsModelsGetRequest object.

  Fields:
    modelsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. Required. The name of the model.
  """

  modelsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)


class MlProjectsModelsListRequest(_messages.Message):
  """A MlProjectsModelsListRequest object.

  Fields:
    filter: Optional. Specifies the subset of models to retrieve.
    orderBy: Optional. Specifies the ordering of the models.
    pageSize: Optional. The page size.
    pageToken: Optional. A token for for continuing the enumeration.
    projectsId: Part of `parent`. Required. The name of the project whose
      models are to be listed.
  """

  filter = _messages.StringField(1)
  orderBy = _messages.StringField(2)
  pageSize = _messages.IntegerField(3, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(4)
  projectsId = _messages.StringField(5, required=True)


class MlProjectsModelsVersionsCreateRequest(_messages.Message):
  """A MlProjectsModelsVersionsCreateRequest object.

  Fields:
    googleCloudMlV1beta1Version: A GoogleCloudMlV1beta1Version resource to be
      passed as the request body.
    modelsId: Part of `parent`. See documentation of `projectsId`.
    projectsId: Part of `parent`. Required. The name of the model.
  """

  googleCloudMlV1beta1Version = _messages.MessageField('GoogleCloudMlV1beta1Version', 1)
  modelsId = _messages.StringField(2, required=True)
  projectsId = _messages.StringField(3, required=True)


class MlProjectsModelsVersionsDeleteRequest(_messages.Message):
  """A MlProjectsModelsVersionsDeleteRequest object.

  Fields:
    modelsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. Required. The name of the version.
    versionsId: Part of `name`. See documentation of `projectsId`.
  """

  modelsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  versionsId = _messages.StringField(3, required=True)


class MlProjectsModelsVersionsGetRequest(_messages.Message):
  """A MlProjectsModelsVersionsGetRequest object.

  Fields:
    modelsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. Required. The name of the version.
    versionsId: Part of `name`. See documentation of `projectsId`.
  """

  modelsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)
  versionsId = _messages.StringField(3, required=True)


class MlProjectsModelsVersionsListRequest(_messages.Message):
  """A MlProjectsModelsVersionsListRequest object.

  Fields:
    filter: Optional. Specifies the subset of versions to retrieve.
    modelsId: Part of `parent`. See documentation of `projectsId`.
    orderBy: Optional. Specifies the ordering of the versions.
    pageSize: Optional. The page size.
    pageToken: Optional. A token for continuing the enumeration.
    projectsId: Part of `parent`. Required. The name of the model whose
      versions are to be listed.
  """

  filter = _messages.StringField(1)
  modelsId = _messages.StringField(2, required=True)
  orderBy = _messages.StringField(3)
  pageSize = _messages.IntegerField(4, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(5)
  projectsId = _messages.StringField(6, required=True)


class MlProjectsModelsVersionsSetDefaultRequest(_messages.Message):
  """A MlProjectsModelsVersionsSetDefaultRequest object.

  Fields:
    googleCloudMlV1beta1SetDefaultVersionRequest: A
      GoogleCloudMlV1beta1SetDefaultVersionRequest resource to be passed as
      the request body.
    modelsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. Required. The version name which is being made
      default within the model.
    versionsId: Part of `name`. See documentation of `projectsId`.
  """

  googleCloudMlV1beta1SetDefaultVersionRequest = _messages.MessageField('GoogleCloudMlV1beta1SetDefaultVersionRequest', 1)
  modelsId = _messages.StringField(2, required=True)
  projectsId = _messages.StringField(3, required=True)
  versionsId = _messages.StringField(4, required=True)


class MlProjectsOperationsCancelRequest(_messages.Message):
  """A MlProjectsOperationsCancelRequest object.

  Fields:
    operationsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the operation resource to be
      cancelled.
  """

  operationsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)


class MlProjectsOperationsDeleteRequest(_messages.Message):
  """A MlProjectsOperationsDeleteRequest object.

  Fields:
    operationsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the operation resource to be
      deleted.
  """

  operationsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)


class MlProjectsOperationsGetRequest(_messages.Message):
  """A MlProjectsOperationsGetRequest object.

  Fields:
    operationsId: Part of `name`. See documentation of `projectsId`.
    projectsId: Part of `name`. The name of the operation resource.
  """

  operationsId = _messages.StringField(1, required=True)
  projectsId = _messages.StringField(2, required=True)


class MlProjectsOperationsListRequest(_messages.Message):
  """A MlProjectsOperationsListRequest object.

  Fields:
    filter: The standard list filter.
    pageSize: The standard list page size.
    pageToken: The standard list page token.
    projectsId: Part of `name`. The name of the operation collection.
  """

  filter = _messages.StringField(1)
  pageSize = _messages.IntegerField(2, variant=_messages.Variant.INT32)
  pageToken = _messages.StringField(3)
  projectsId = _messages.StringField(4, required=True)


class MlProjectsPredictRequest(_messages.Message):
  """A MlProjectsPredictRequest object.

  Fields:
    googleCloudMlV1beta1PredictRequest: A GoogleCloudMlV1beta1PredictRequest
      resource to be passed as the request body.
    projectsId: Part of `name`. Required. The resource name of a model or a
      version.
  """

  googleCloudMlV1beta1PredictRequest = _messages.MessageField('GoogleCloudMlV1beta1PredictRequest', 1)
  projectsId = _messages.StringField(2, required=True)


class StandardQueryParameters(_messages.Message):
  """Query parameters accepted by all methods.

  Enums:
    FXgafvValueValuesEnum: V1 error format.
    AltValueValuesEnum: Data format for response.

  Fields:
    f__xgafv: V1 error format.
    access_token: OAuth access token.
    alt: Data format for response.
    bearer_token: OAuth bearer token.
    callback: JSONP
    fields: Selector specifying which fields to include in a partial response.
    key: API key. Your API key identifies your project and provides you with
      API access, quota, and reports. Required unless you provide an OAuth 2.0
      token.
    oauth_token: OAuth 2.0 token for the current user.
    pp: Pretty-print response.
    prettyPrint: Returns response with indentations and line breaks.
    quotaUser: Available to use for quota purposes for server-side
      applications. Can be any arbitrary string assigned to a user, but should
      not exceed 40 characters.
    trace: A tracing token of the form "token:<tokenid>" to include in api
      requests.
    uploadType: Legacy upload protocol for media (e.g. "media", "multipart").
    upload_protocol: Upload protocol for media (e.g. "raw", "multipart").
  """

  class AltValueValuesEnum(_messages.Enum):
    """Data format for response.

    Values:
      json: Responses with Content-Type of application/json
      media: Media download with context-dependent Content-Type
      proto: Responses with Content-Type of application/x-protobuf
    """
    json = 0
    media = 1
    proto = 2

  class FXgafvValueValuesEnum(_messages.Enum):
    """V1 error format.

    Values:
      _1: v1 error format
      _2: v2 error format
    """
    _1 = 0
    _2 = 1

  f__xgafv = _messages.EnumField('FXgafvValueValuesEnum', 1)
  access_token = _messages.StringField(2)
  alt = _messages.EnumField('AltValueValuesEnum', 3, default=u'json')
  bearer_token = _messages.StringField(4)
  callback = _messages.StringField(5)
  fields = _messages.StringField(6)
  key = _messages.StringField(7)
  oauth_token = _messages.StringField(8)
  pp = _messages.BooleanField(9, default=True)
  prettyPrint = _messages.BooleanField(10, default=True)
  quotaUser = _messages.StringField(11)
  trace = _messages.StringField(12)
  uploadType = _messages.StringField(13)
  upload_protocol = _messages.StringField(14)


encoding.AddCustomJsonFieldMapping(
    StandardQueryParameters, 'f__xgafv', '$.xgafv',
    package=u'ml')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_1', '1',
    package=u'ml')
encoding.AddCustomJsonEnumMapping(
    StandardQueryParameters.FXgafvValueValuesEnum, '_2', '2',
    package=u'ml')
