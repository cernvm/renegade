"""Generated client library for ml version v1alpha3."""
# NOTE: This file is autogenerated and should not be edited by hand.
from apitools.base.py import base_api
from googlecloudsdk.third_party.apis.ml.v1alpha3 import ml_v1alpha3_messages as messages


class MlV1alpha3(base_api.BaseApiClient):
  """Generated client library for service ml version v1alpha3."""

  MESSAGES_MODULE = messages
  BASE_URL = u'https://ml.googleapis.com/'

  _PACKAGE = u'ml'
  _SCOPES = [u'https://www.googleapis.com/auth/cloud-platform']
  _VERSION = u'v1alpha3'
  _CLIENT_ID = '1042881264118.apps.googleusercontent.com'
  _CLIENT_SECRET = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _USER_AGENT = 'x_Tw5K8nnjoRAqULM9PFAC2b'
  _CLIENT_CLASS_NAME = u'MlV1alpha3'
  _URL_VERSION = u'v1alpha3'
  _API_KEY = None

  def __init__(self, url='', credentials=None,
               get_credentials=True, http=None, model=None,
               log_request=False, log_response=False,
               credentials_args=None, default_global_params=None,
               additional_http_headers=None):
    """Create a new ml handle."""
    url = url or self.BASE_URL
    super(MlV1alpha3, self).__init__(
        url, credentials=credentials,
        get_credentials=get_credentials, http=http, model=model,
        log_request=log_request, log_response=log_response,
        credentials_args=credentials_args,
        default_global_params=default_global_params,
        additional_http_headers=additional_http_headers)
    self.projects_models_versions = self.ProjectsModelsVersionsService(self)
    self.projects_models = self.ProjectsModelsService(self)
    self.projects_operations = self.ProjectsOperationsService(self)
    self.projects = self.ProjectsService(self)

  class ProjectsModelsVersionsService(base_api.BaseApiService):
    """Service class for the projects_models_versions resource."""

    _NAME = u'projects_models_versions'

    def __init__(self, client):
      super(MlV1alpha3.ProjectsModelsVersionsService, self).__init__(client)
      self._upload_configs = {
          }

    def Delete(self, request, global_params=None):
      """Delete a version.

      Args:
        request: (MlProjectsModelsVersionsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleProtobufEmpty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'DELETE',
        method_id=u'ml.projects.models.versions.delete',
        ordered_params=[u'projectsId', u'modelsId', u'versionsId'],
        path_params=[u'modelsId', u'projectsId', u'versionsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/models/{modelsId}/versions/{versionsId}',
        request_field='',
        request_type_name=u'MlProjectsModelsVersionsDeleteRequest',
        response_type_name=u'GoogleProtobufEmpty',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      """Get version metadata.

      Args:
        request: (MlProjectsModelsVersionsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3Version) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.models.versions.get',
        ordered_params=[u'projectsId', u'modelsId', u'versionsId'],
        path_params=[u'modelsId', u'projectsId', u'versionsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/models/{modelsId}/versions/{versionsId}',
        request_field='',
        request_type_name=u'MlProjectsModelsVersionsGetRequest',
        response_type_name=u'GoogleCloudMlV1alpha3Version',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      """List versions in the model.

      Args:
        request: (MlProjectsModelsVersionsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3ListVersionsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.models.versions.list',
        ordered_params=[u'projectsId', u'modelsId'],
        path_params=[u'modelsId', u'projectsId'],
        query_params=[u'filter', u'orderBy', u'pageSize', u'pageToken'],
        relative_path=u'v1alpha3/projects/{projectsId}/models/{modelsId}/versions',
        request_field='',
        request_type_name=u'MlProjectsModelsVersionsListRequest',
        response_type_name=u'GoogleCloudMlV1alpha3ListVersionsResponse',
        supports_download=False,
    )

    def SetDefault(self, request, global_params=None):
      """Mark the version as default within the model.

      Args:
        request: (MlProjectsModelsVersionsSetDefaultRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3Version) The response message.
      """
      config = self.GetMethodConfig('SetDefault')
      return self._RunMethod(
          config, request, global_params=global_params)

    SetDefault.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.models.versions.setDefault',
        ordered_params=[u'projectsId', u'modelsId', u'versionsId'],
        path_params=[u'modelsId', u'projectsId', u'versionsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/models/{modelsId}/versions/{versionsId}:setDefault',
        request_field=u'googleCloudMlV1alpha3SetDefaultVersionRequest',
        request_type_name=u'MlProjectsModelsVersionsSetDefaultRequest',
        response_type_name=u'GoogleCloudMlV1alpha3Version',
        supports_download=False,
    )

  class ProjectsModelsService(base_api.BaseApiService):
    """Service class for the projects_models resource."""

    _NAME = u'projects_models'

    def __init__(self, client):
      super(MlV1alpha3.ProjectsModelsService, self).__init__(client)
      self._upload_configs = {
          }

    def Create(self, request, global_params=None):
      """Create a model which will later contain a set of model versions.

      Args:
        request: (MlProjectsModelsCreateRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3Model) The response message.
      """
      config = self.GetMethodConfig('Create')
      return self._RunMethod(
          config, request, global_params=global_params)

    Create.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.models.create',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/models',
        request_field=u'googleCloudMlV1alpha3Model',
        request_type_name=u'MlProjectsModelsCreateRequest',
        response_type_name=u'GoogleCloudMlV1alpha3Model',
        supports_download=False,
    )

    def CreateVersion(self, request, global_params=None):
      """Upload a trained TensorFlow model version. The result of the operation.
is a Version..

      Args:
        request: (MlProjectsModelsCreateVersionRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningOperation) The response message.
      """
      config = self.GetMethodConfig('CreateVersion')
      return self._RunMethod(
          config, request, global_params=global_params)

    CreateVersion.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.models.createVersion',
        ordered_params=[u'projectsId', u'modelsId'],
        path_params=[u'modelsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/models/{modelsId}',
        request_field=u'googleCloudMlV1alpha3Version',
        request_type_name=u'MlProjectsModelsCreateVersionRequest',
        response_type_name=u'GoogleLongrunningOperation',
        supports_download=False,
    )

    def Delete(self, request, global_params=None):
      """Delete the model and all versions in it.

      Args:
        request: (MlProjectsModelsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleProtobufEmpty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'DELETE',
        method_id=u'ml.projects.models.delete',
        ordered_params=[u'projectsId', u'modelsId'],
        path_params=[u'modelsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/models/{modelsId}',
        request_field='',
        request_type_name=u'MlProjectsModelsDeleteRequest',
        response_type_name=u'GoogleProtobufEmpty',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      """Describe a model and versions in it.

      Args:
        request: (MlProjectsModelsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3Model) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.models.get',
        ordered_params=[u'projectsId', u'modelsId'],
        path_params=[u'modelsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/models/{modelsId}',
        request_field='',
        request_type_name=u'MlProjectsModelsGetRequest',
        response_type_name=u'GoogleCloudMlV1alpha3Model',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      """List models in the project.

      Args:
        request: (MlProjectsModelsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3ListModelsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.models.list',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[u'filter', u'orderBy', u'pageSize', u'pageToken'],
        relative_path=u'v1alpha3/projects/{projectsId}/models',
        request_field='',
        request_type_name=u'MlProjectsModelsListRequest',
        response_type_name=u'GoogleCloudMlV1alpha3ListModelsResponse',
        supports_download=False,
    )

  class ProjectsOperationsService(base_api.BaseApiService):
    """Service class for the projects_operations resource."""

    _NAME = u'projects_operations'

    def __init__(self, client):
      super(MlV1alpha3.ProjectsOperationsService, self).__init__(client)
      self._upload_configs = {
          }

    def Cancel(self, request, global_params=None):
      """Starts asynchronous cancellation on a long-running operation.  The server.
makes a best effort to cancel the operation, but success is not
guaranteed.  If the server doesn't support this method, it returns
`google.rpc.Code.UNIMPLEMENTED`.  Clients can use
Operations.GetOperation or
other methods to check whether the cancellation succeeded or whether the
operation completed despite cancellation.

      Args:
        request: (MlProjectsOperationsCancelRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleProtobufEmpty) The response message.
      """
      config = self.GetMethodConfig('Cancel')
      return self._RunMethod(
          config, request, global_params=global_params)

    Cancel.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.operations.cancel',
        ordered_params=[u'projectsId', u'operationsId'],
        path_params=[u'operationsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/operations/{operationsId}:cancel',
        request_field='',
        request_type_name=u'MlProjectsOperationsCancelRequest',
        response_type_name=u'GoogleProtobufEmpty',
        supports_download=False,
    )

    def Delete(self, request, global_params=None):
      """Deletes a long-running operation. This method indicates that the client is.
no longer interested in the operation result. It does not cancel the
operation. If the server doesn't support this method, it returns
`google.rpc.Code.UNIMPLEMENTED`.

      Args:
        request: (MlProjectsOperationsDeleteRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleProtobufEmpty) The response message.
      """
      config = self.GetMethodConfig('Delete')
      return self._RunMethod(
          config, request, global_params=global_params)

    Delete.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'DELETE',
        method_id=u'ml.projects.operations.delete',
        ordered_params=[u'projectsId', u'operationsId'],
        path_params=[u'operationsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/operations/{operationsId}',
        request_field='',
        request_type_name=u'MlProjectsOperationsDeleteRequest',
        response_type_name=u'GoogleProtobufEmpty',
        supports_download=False,
    )

    def Get(self, request, global_params=None):
      """Gets the latest state of a long-running operation.  Clients can use this.
method to poll the operation result at intervals as recommended by the API
service.

      Args:
        request: (MlProjectsOperationsGetRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningOperation) The response message.
      """
      config = self.GetMethodConfig('Get')
      return self._RunMethod(
          config, request, global_params=global_params)

    Get.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.operations.get',
        ordered_params=[u'projectsId', u'operationsId'],
        path_params=[u'operationsId', u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/operations/{operationsId}',
        request_field='',
        request_type_name=u'MlProjectsOperationsGetRequest',
        response_type_name=u'GoogleLongrunningOperation',
        supports_download=False,
    )

    def List(self, request, global_params=None):
      """Lists operations that match the specified filter in the request. If the.
server doesn't support this method, it returns `UNIMPLEMENTED`.

NOTE: the `name` binding below allows API services to override the binding
to use different resource name schemes, such as `users/*/operations`.

      Args:
        request: (MlProjectsOperationsListRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningListOperationsResponse) The response message.
      """
      config = self.GetMethodConfig('List')
      return self._RunMethod(
          config, request, global_params=global_params)

    List.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.operations.list',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[u'filter', u'pageSize', u'pageToken'],
        relative_path=u'v1alpha3/projects/{projectsId}/operations',
        request_field='',
        request_type_name=u'MlProjectsOperationsListRequest',
        response_type_name=u'GoogleLongrunningListOperationsResponse',
        supports_download=False,
    )

  class ProjectsService(base_api.BaseApiService):
    """Service class for the projects resource."""

    _NAME = u'projects'

    def __init__(self, client):
      super(MlV1alpha3.ProjectsService, self).__init__(client)
      self._upload_configs = {
          }

    def GetConfig(self, request, global_params=None):
      """Get the service config associated with a given project.

      Args:
        request: (MlProjectsGetConfigRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3GetConfigResponse) The response message.
      """
      config = self.GetMethodConfig('GetConfig')
      return self._RunMethod(
          config, request, global_params=global_params)

    GetConfig.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'GET',
        method_id=u'ml.projects.getConfig',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}:getConfig',
        request_field='',
        request_type_name=u'MlProjectsGetConfigRequest',
        response_type_name=u'GoogleCloudMlV1alpha3GetConfigResponse',
        supports_download=False,
    )

    def Hyperparameters(self, request, global_params=None):
      """Get the hyperparameters assigned to the given run.

      Args:
        request: (MlProjectsHyperparametersRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3GetHyperparametersResponse) The response message.
      """
      config = self.GetMethodConfig('Hyperparameters')
      return self._RunMethod(
          config, request, global_params=global_params)

    Hyperparameters.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.hyperparameters',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}/hyperparameters',
        request_field=u'googleCloudMlV1alpha3GetHyperparametersRequest',
        request_type_name=u'MlProjectsHyperparametersRequest',
        response_type_name=u'GoogleCloudMlV1alpha3GetHyperparametersResponse',
        supports_download=False,
    )

    def Predict(self, request, global_params=None):
      """Performs prediction on the data in the request.

      Args:
        request: (MlProjectsPredictRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleCloudMlV1alpha3PredictResponse) The response message.
      """
      config = self.GetMethodConfig('Predict')
      return self._RunMethod(
          config, request, global_params=global_params)

    Predict.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.predict',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}:predict',
        request_field=u'googleCloudMlV1alpha3PredictRequest',
        request_type_name=u'MlProjectsPredictRequest',
        response_type_name=u'GoogleCloudMlV1alpha3PredictResponse',
        supports_download=False,
    )

    def ReportMetric(self, request, global_params=None):
      """Report the progress of a Training Job.

      Args:
        request: (MlProjectsReportMetricRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleProtobufEmpty) The response message.
      """
      config = self.GetMethodConfig('ReportMetric')
      return self._RunMethod(
          config, request, global_params=global_params)

    ReportMetric.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.reportMetric',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}:reportMetric',
        request_field=u'googleCloudMlV1alpha3ReportMetricRequest',
        request_type_name=u'MlProjectsReportMetricRequest',
        response_type_name=u'GoogleProtobufEmpty',
        supports_download=False,
    )

    def SubmitPredictionJob(self, request, global_params=None):
      """Performs batch prediction on the files specified in the request.
JobMetadata and will contain PredictionJobResult when completed.

      Args:
        request: (MlProjectsSubmitPredictionJobRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningOperation) The response message.
      """
      config = self.GetMethodConfig('SubmitPredictionJob')
      return self._RunMethod(
          config, request, global_params=global_params)

    SubmitPredictionJob.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.submitPredictionJob',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}:submitPredictionJob',
        request_field=u'googleCloudMlV1alpha3SubmitPredictionJobRequest',
        request_type_name=u'MlProjectsSubmitPredictionJobRequest',
        response_type_name=u'GoogleLongrunningOperation',
        supports_download=False,
    )

    def SubmitTrainingJob(self, request, global_params=None):
      """Create a training job. The resulting operation contains.
JobMetadata and will contain JobResult when completed.

      Args:
        request: (MlProjectsSubmitTrainingJobRequest) input message
        global_params: (StandardQueryParameters, default: None) global arguments
      Returns:
        (GoogleLongrunningOperation) The response message.
      """
      config = self.GetMethodConfig('SubmitTrainingJob')
      return self._RunMethod(
          config, request, global_params=global_params)

    SubmitTrainingJob.method_config = lambda: base_api.ApiMethodInfo(
        http_method=u'POST',
        method_id=u'ml.projects.submitTrainingJob',
        ordered_params=[u'projectsId'],
        path_params=[u'projectsId'],
        query_params=[],
        relative_path=u'v1alpha3/projects/{projectsId}:submitTrainingJob',
        request_field=u'googleCloudMlV1alpha3SubmitTrainingJobRequest',
        request_type_name=u'MlProjectsSubmitTrainingJobRequest',
        response_type_name=u'GoogleLongrunningOperation',
        supports_download=False,
    )
