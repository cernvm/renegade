#################################################################################
# Author: Cristovao Cordeiro <cristovao.cordeiro@cern.ch>			            #
#										                                        #
# Cloud Config module for Ganglia service. 					                    #
# Documentation in:								                                #
# https://twiki.cern.ch/twiki/bin/view/LCG/CloudInit				            #
#################################################################################

'''
Copyright 2016 CERN.
This software is distributed under the terms of the GNU General Public
Licence version 3 (GPL Version 3).
'''

import subprocess
import os
try:
    import cloudinit.CloudConfig as cc
except ImportError:
    import cloudinit.config as cc
except:
    print "There is something wrong with this module installation. Please verify and rerun."
    import sys
    sys.exit(0)

# In case this runs to early during the boot, the PATH environment can still be unset.
# Let's define each necessary command's path using subprocess calls
# so it raises exceptions directly from the child process to the parent
YUM_CMD = '/usr/bin/yum'

GLOBALS_TEMPLATE = [
    'daemonize',
    'setuid',
    'user',
    'debug_level',
    'max_udp_msg_len',
    'mute',
    'deaf',
    'allow_extra_data',
    'host_dmax',	# in seconds
    'cleanup_threshold',	# in seconds
    'gexec',
    'send_metadata_interval',	# in seconds
    'override_hostname',
    'override_hostname_bash',
    'override_ip'
]

CLUSTER_TEMPLATE = [
    'name',
    'owner',
    'latlong',
    'url'
]

UDPSEND_TEMPLATE = [
    'host',
    'port',
    'ttl'
]

UDPRECV_TEMPLATE = [
    'port',
    'bind'
]


def conf_node(node_f, params, lines):
    """Parse the userdata Ganglia parameters into the templates"""
    if 'globals' in params:
        globals_cfg = params['globals']
        for param, value in globals_cfg.iteritems():
            if param in GLOBALS_TEMPLATE:
                if param == 'override_hostname_bash':
                    param = 'override_hostname'
                    bash_value = subprocess.Popen(value, shell=True, stdout=subprocess.PIPE)
                    value = bash_value.communicate()[0].replace('\n', '')
                for i in range(0, len(lines)):
                    if param in lines[i]:
                        lines[i] = "  %s = %s\n" % (param, str(value))
                        break
    aux_send_channel = 0	# Help finding the right block.
    # Find index offset in lines for faster search
    for i in range(0, len(lines)):
        if 'cluster {' in lines[i]:
            cluster_offset = i
        if 'udp_recv_channel {' in lines[i]:
            offset_recv = i
        if ('mcast_join' in lines[i]) and (aux_send_channel == 0):
            # First mcast_joint belongs to udp_send_channel
            offset_send = i
            aux_send_channel = 1
        if 'tcp_accept_channel {' in lines[i]:
            offset_tcp = i
            break	# Final configurable block

    if 'cluster' in params:
        cluster_cfg = params['cluster']
        for param, value in cluster_cfg.iteritems():
            if param in CLUSTER_TEMPLATE:
                for ln in range(cluster_offset, len(lines)):
                    if param in lines[ln]:
                        lines[ln] = "  %s = %s\n" % (param, str(value))
                        break

    lines = [word.replace('mcast_join', 'host') for word in lines]
    # Change to 'host' instead of 'mcast_join'
    # If it isn't passed in cloud-config, it will be changed anyway.

    for i in range(offset_recv, offset_recv+10):
        # Erase the 'host' parameter in udp_recv_channel, because it causes parsing errors
        if 'host' in lines[i]:
            lines[i] = ''
            break

    if 'udp_send_channel' in params:
        udp_send_cfg = params['udp_send_channel']
        for index, key in enumerate(udp_send_cfg.keys()):
            if index > 0:
                # Just add extra channels in the end of the conf file
                lines.append('udp_send_channel {\n')
                for param, value in udp_send_cfg[key].iteritems():
                    if param in UDPSEND_TEMPLATE:
                        lines.append('  %s = %s\n' % (param,str(value)))
                lines.append('}\n')
            else:
                for param, value in udp_send_cfg[key].iteritems():
                    for a in range(offset_send, len(lines)):
                        if param in UDPSEND_TEMPLATE and param in lines[a]:
                            lines[a] = "  %s = %s\n" % (param,str(value))
                            break
                        if lines[a] == '}\n':
                            break

    if 'udp_recv_channel' in params:
        udp_recv_cfg = params['udp_recv_channel']
        for param, value in udp_recv_cfg.iteritems():
            if param in UDPRECV_TEMPLATE:
                for i in range(offset_recv, len(lines)):
                    if param in lines[i]:
                        lines[i] = "  %s = %s\n" % (param, str(value))
                        break

    if 'tcp_accept_channel' in params:
        tcp_cfg = params['tcp_accept_channel']
        for param, value in tcp_cfg.iteritems():
            if param == 'port':
                for i in range(offset_tcp, len(lines)):
                    # tcp_accept_channel is generally small. Five iterations just in case.
                    if param in lines[i]:
                        lines[i] = "  %s = %s\n" % (param, str(value))
                        break

    enable_gmond = True
    if "enabled" in params  \
     and (str(params['enabled']).lower() == "off" or str(params['enabled']).lower() == "false"):
        enable_gmond = False

    flocal_new = open(node_f, 'w')
    flocal_new.writelines(lines)
    flocal_new.close()

    return enable_gmond


def handle(_name, cfg, cloud, log, _args):
    """Handles the Ganglia contextualization"""
    if 'ganglia' in cfg:
        ganglia_cfg = cfg['ganglia']

        if 'install' in ganglia_cfg:
            if ganglia_cfg['install'] == True:
                subprocess.check_call([YUM_CMD, '-y', 'install', 'ganglia', 'ganglia-gmond'])

        gmond_conf_file = '/etc/ganglia/gmond.conf'

        flocal = open(gmond_conf_file, 'r')     # Open to read all the file and then close it
        node_lines = flocal.readlines()
        flocal.close()
        enable_gmond = conf_node(gmond_conf_file, ganglia_cfg, node_lines)
        if enable_gmond:
            os.system('/etc/init.d/gmond restart ; /sbin/chkconfig gmond on')
        else:
            os.system('/etc/init.d/gmond stop')
