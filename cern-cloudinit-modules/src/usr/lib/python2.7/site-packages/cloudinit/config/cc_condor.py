#################################################################################
# Author: Cristovao Cordeiro <cristovao.cordeiro@cern.ch>			            #
#										                                        #
# Cloud Config module for Condor service. 					                    #
# Documentation in:								                                #
# https://twiki.cern.ch/twiki/bin/view/LCG/CloudInit				            #
#################################################################################

'''
Copyright 2016 CERN.
This software is distributed under the terms of the GNU General Public
Licence version 3 (GPL Version 3).
'''

import subprocess
import urllib
import os
import re
import socket
import pwd
import multiprocessing
try:
    import cloudinit.CloudConfig as cc
except ImportError:
    import cloudinit.config as cc
except:
    print "There is something wrong with this module installation. Please verify and rerun."
    import sys
    sys.exit(0)


# In case this runs to early during the boot, the PATH environment can still be unset.
# Let's define each necessary command's path
# MACROS:
YUM_CMD = '/usr/bin/yum'
SERVICE_CMD = '/sbin/service'
CHOWN_CMD = '/bin/chown'

# Condor default template:
TEMPLATE = {
    'DAEMON_LIST' : 'MASTER, STARTD',
    'HIGHPORT' : '24500',
    'LOWPORT' : '20000',
    'START' : 'TRUE',
    'SUSPEND' : 'FALSE',
    'PREEMPT' : 'FALSE',
    'KILL' : 'FALSE',
    'QUEUE_SUPER_USERS' : 'root, condor',
    'ALLOW_WRITE' : 'condor@*.*',
    'STARTER_ALLOW_RUNAS_OWNER' : 'False',
    'ALLOW_DAEMON' : '*',
    'RELEASE_DIR' : '/usr',
    'LOCAL_DIR' : '/var',
    'RANK' : '0'
}


def install_condor():
    """Make sure Condor is well installed, if necessary"""
    print 'Starting Condor installation: '
    subprocess.check_call([YUM_CMD, "-y", "install", "libtool-ltdl", "libvirt",\
            "perl-XML-Simple", "openssl098e", "compat-expat1", "compat-openldap",\
            "perl-DateManip", "perl-Time-HiRes", "policycoreutils-python"])

    print 'Overwriting condor_config.local'

    condor_repo = "http://www.cs.wisc.edu/condor/yum/repo.d/condor-stable-rhel6.repo"
    urllib.urlretrieve(condor_repo, '/etc/yum.repos.d/condor.repo')

    subprocess.check_call([YUM_CMD, '-y', 'install', 'condor'])

    os.environ['PATH'] = os.environ['PATH']+"/usr/sbin:/sbin"
    os.environ['CONDOR_CONFIG'] = "/etc/condor/condor_config"

    try:
        os.makedirs('/scratch/condor')
    except OSError:
        print 'Directory /scratch alreadys exists'

    subprocess.call([CHOWN_CMD, 'condor:condor', '/scratch/condor'])
    subprocess.call(["/bin/ln -s /etc/condor/condor_config.local /etc/condor/config.d/condor_config.local"], shell=True)


def handle(_name, cfg, cloud, log, _args):
    """Handles Condor contextualization"""
    if 'condor' not in cfg:
        return

    condor_cc_cfg = cfg['condor']

    subprocess.call([SERVICE_CMD, 'condor', 'stop'])

    # Condor configuration file
    config_file = '/etc/condor/condor_config.local'

    try:
        ip_address = socket.gethostbyname(socket.gethostname())
    except: 		# Sometimes the IP is resolved when this runs, so...
        ip_address = '$(IP_ADDRESS)'

    slot_dynamic = True
    # Read userdata configuration
    # Allow any parameter on the userdata - user's responsability
    for parameter in condor_cc_cfg:
        # IP_ADDRESS is a key for a dynamic configuration of the IP address
        if 'IPADDRESS' in str(condor_cc_cfg[parameter]):
            TEMPLATE[parameter] = re.sub('IPADDRESS', ip_address, str(condor_cc_cfg[parameter]))
        else:
            # pool-password is not a configuration
            if parameter == 'pool-password':
                try:
                    ppwd = open(condor_cc_cfg['SEC_PASSWORD_FILE'], 'w')
                except KeyError:
                    ppwd = open('/root/pool_password', 'w')
                except:
                    raise
                ppwd.write(condor_cc_cfg['pool-password'])
                ppwd.close()
            elif (parameter == 'install') and (condor_cc_cfg[parameter] == True):
                install_condor()
            else:
                TEMPLATE[parameter] = condor_cc_cfg[parameter]
                if re.match('SLOT[\d]_USER', parameter):
                    os.system("/usr/sbin/useradd -m -s /sbin/nologin  %s > /dev/null 2>&1\n" % (condor_cc_cfg[parameter]))
                    slot_dynamic = False

    # Dynamically writing SLOT users
    condor_uid = pwd.getpwnam('condor').pw_uid
    condor_gid = pwd.getpwnam('condor').pw_gid
    TEMPLATE['CONDOR_ID'] = "%s.%s" % (condor_uid, condor_gid)

    if slot_dynamic:
        for count in range(1, multiprocessing.cpu_count() + 1):
            parameter = "SLOT%s_USER" % (count)
            TEMPLATE[parameter] = "cuser%s" % (count)
            os.system("/usr/sbin/useradd -m -s /sbin/nologin  cuser%s > /dev/null 2>&1\n" % (count))

    # Write new configuration file
    f_desc = open(config_file, 'w')
    for parameter in TEMPLATE:
        f_desc.write("%s = %s\n" %(parameter, TEMPLATE[parameter]))
    f_desc.close()

    subprocess.check_call([SERVICE_CMD, 'condor', 'start'])
