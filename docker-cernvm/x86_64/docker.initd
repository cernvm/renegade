#!/bin/sh

# Part of CernVM extensions
# See: http://cernvm.cern.ch

### BEGIN INIT INFO
# Provides:           docker
# Required-Start:     $local_fs $network $named
# Should-Start:       $time
# Required-Stop:
# Should-Stop:
# Default-Start:      3 4 5
# Default-Stop:       0 1 2 6
# Short-Description:  Starts the Docker daemon
# Description:        Starts the Docker daemon
### END INIT INFO

. /etc/init.d/functions

# Return values acc. to LSB for all commands but status:
# 0	  - success
# 1       - generic or unspecified error
# 2       - invalid or excess argument(s)
# 3       - unimplemented feature (e.g. "reload")
# 4       - user had insufficient privileges
# 5       - program is not installed
# 6       - program is not configured
# 7       - program is not running
# 8--199  - reserved (8--99 LSB, 100--149 distrib, 150--199 appl)

RETVAL=0
LOCKFILE=/var/lock/subsys/docker

[ -f /etc/sysconfig/docker ] && . /etc/sysconfig/docker
DOCKER_CONFIG=${DOCKER_CONFIG:=/etc/docker.conf}

[ ! -f ${DOCKER_CONFIG} ] && exit 6
. ${DOCKER_CONFIG}
[ -f ${DOCKER_CONFIG_LOCAL} ] && . ${DOCKER_CONFIG_LOCAL}

prog_docker="/usr/bin/docker"


is_root() {
  [ $(id -u) -eq 0 ] && return 0
  return 1
}


mount_cgroups() {
  if grep -v '^#' /etc/fstab | grep -q cgroup; then
    exit 0
  fi
  if ! mountpoint -q /sys/fs/cgroup; then
    mount -t tmpfs -o uid=0,gid=0,mode=0755 cgroup /sys/fs/cgroup
  fi
  cd /sys/fs/cgroup
  # get/mount list of enabled cgroup controllers
  for sys in $(awk '!/^#/ { if ($4 == 1) print $1 }' /proc/cgroups); do
    mkdir -p $sys
    if ! mountpoint -q $sys; then
      if ! mount -n -t cgroup -o $sys cgroup $sys; then
        rmdir $sys || true
      fi
    fi
  done
  return 0
}

umount_cgroups() {
  if grep -v '^#' /etc/fstab | grep -q cgroup; then
    exit 0
  fi
  cd /sys/fs/cgroup
  for sys in *; do
    if mountpoint -q $sys; then
      umount $sys
      rmdir $sys
    fi
  done
  cd /
  if mountpoint -q /sys/fs/cgroup; then
    umount /sys/fs/cgroup
  fi
  return 0
}


start() {
  ! is_root && return 4
  mkdir -p "$DOCKER_STORAGE"

  echo -n $"Starting Docker: "
  mount_cgroups
  RETVAL=$?
  if [ $RETVAL -ne 0 ]; then
    echo_failure
    echo
    return $RETVAL
  fi
  nohup $prog_docker -d -g "$DOCKER_STORAGE" > $DOCKER_LOGFILE 2>&1 &
  RETVAL=$?
  if [ $RETVAL -eq 0 ]; then
    echo_success
    echo
    touch ${LOCKFILE}
  else
    echo_failure
    echo
  fi

  return $RETVAL
}


stop() {
  [ ! is_root ] && return 4

  if [ -f /var/run/docker.pid ]; then
    echo -n $"Shutting down Docker: "
    kill $(cat /var/run/docker.pid) >/dev/null
    rm -f /var/run/docker.pid
    echo_success
    echo
  fi
  umount_cgroups

  rm -f ${LOCKFILE}
  return 0 
}


status() {
  if [ -f /var/run/docker.pid ]; then
    echo "Docker running as pid $(cat /var/run/docker.pid)"
    RETVAL=0
  else
    RETVAL=3
  fi
  return $RETVAL
}


case "$1" in
  start)
    start
    RETVAL=$?
  ;;
  stop)
    stop
    RETVAL=$?
  ;;
  restart|try-restart|condrestart)
    ## Stop the service and regardless of whether it was
    ## running or not, start it again.
    #
    ## Note: try-restart is now part of LSB (as of 1.9).
    ## RH has a similar command named condrestart.
    stop
    start
    RETVAL=$?
  ;;
    reload|force-reload)
    # ToDO
    RETVAL=3
  ;;
  status)
    # Return value is slightly different for the status command:
    # 0 - service up and running
    # 1 - service dead, but /var/run/  pid  file exists
    # 2 - service dead, but /var/lock/ lock file exists
    # 3 - service not running (unused)
    # 4 - service status unknown :-(
    # 5--199 reserved (5--99 LSB, 100--149 distro, 150--199 appl.)
    status
    RETVAL=3
  ;;
  *)
    echo "Usage: $0 {start|stop|status|try-restart|condrestart|restart|force-reload|reload}"
    RETVAL=3
  ;;
esac

exit $RETVAL
